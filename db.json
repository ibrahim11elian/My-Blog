{
  "posts": [
    {
      "id": "1",
      "title": "a title"
    },
    {
      "id": "2",
      "title": "another title"
    }
  ],
  "comments": [
    {
      "id": "1",
      "text": "a comment about post 1",
      "postId": "1"
    },
    {
      "id": "2",
      "text": "another comment about post 1",
      "postId": "1"
    }
  ],
  "profile": {
    "name": "typicode"
  },
  "articles": [
    {
      "id": "7212",
      "views": "798",
      "date": "2024-01-18T18:37:31.452Z",
      "title": "A simple markdown editor with preview, implemented with React.js and TypeScript.",
      "content": "# React + Vite\n\nThis template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.\n\nCurrently, two official plugins are available:\n\n- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh\n- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh\n",
      "author": "dsadkjslkfj",
      "cover": "article-img.png"
    },
    {
      "id": "8797",
      "views": "335",
      "title": "A simple markdown editor with preview, implemented with React.js and TypeScript.",
      "date": "Thu Jan 18 2024 23:10:07 GMT+0200 (Eastern European Standard Time)",
      "content": "### Quick Start\n\n```bash\nnpm i @uiw/react-md-editor\n```\n\n### Using\n\n[![Open in CodeSandbox](https://img.shields.io/badge/Open%20in-CodeSandbox-blue?logo=codesandbox)](https://codesandbox.io/embed/markdown-editor-for-react-izdd6?fontsize=14&hidenavigation=1&theme=dark)\n[![Open in Github gh-pages](https://img.shields.io/badge/Open%20In-Github%20gh--pages-blue?logo=github)](https://uiwjs.github.io/react-md-editor/)\n[![Open in Gitee gh-pages](https://img.shields.io/badge/Open%20In-Gitee%20gh--pages-blue?logo=web)](https://uiw.gitee.io/react-md-editor/)\n\n```jsx mdx:preview\nimport React from \"react\";\nimport MDEditor from '@uiw/react-md-editor';\n\nexport default function App() {\n  const [value, setValue] = React.useState(\"**Hello world!!!**\");\n  return (\n    <div className=\"container\">\n      <MDEditor\n        value={value}\n        onChange={setValue}\n      />\n      <MDEditor.Markdown source={value} style={{ whiteSpace: 'pre-wrap' }} />\n    </div>\n  );\n}\n```\n\n### Special Markdown syntax\n\n**Supports for CSS Style**\n\nUse HTML comments `<!--rehype:xxx-->`<!--rehype:style=color: red; font-weight: bold;--> to let Markdown support style customization.\n",
      "author": "ibrahim ahmed",
      "cover": "ibrahim.WebP"
    },
    {
      "id": "9a57",
      "views": "4353",
      "date": "Fri Jan 19 2024 01:08:23 GMT+0200 (Eastern European Standard Time)",
      "title": "A simple markdown editor with preview, implemented with React.js and TypeScript.",
      "content": "A simple markdown editor with preview, implemented with React.js and TypeScript. This React Component aims to provide a simple Markdown editor with syntax highlighting support. This is based on `textarea` encapsulation, so it does not depend on any modern code editors such as Acs, CodeMirror, Monaco etc.\n\n### Features\n\n- üìë Indent line or selected text by pressing tab key, with customizable indentation.\n- ‚ôªÔ∏è Based on `textarea` encapsulation, does not depend on any modern code editors.\n- üöß Does not depend on the [`uiw`](https://github.com/uiwjs/uiw) component library.\n- üöò Automatic list on new lines.\n- üòª GitHub flavored markdown support.\n- üåí Support dark-mode/night-mode **@v3.11.0+**.\n- üí° Support [next.js](https://github.com/uiwjs/react-md-editor/issues/52#issuecomment-848969341), [Use examples](#support-nextjs) in [next.js](https://nextjs.org/).\n- Line/lines duplication (Ctrl+D) and movement (Alt+UpArrow/DownArrow) **@v3.24.0+**.\n\n### Quick Start\n\n```bash\nnpm i @uiw/react-md-editor\n```\n\n### Using\n\n[![Open in CodeSandbox](https://img.shields.io/badge/Open%20in-CodeSandbox-blue?logo=codesandbox)](https://codesandbox.io/embed/markdown-editor-for-react-izdd6?fontsize=14&hidenavigation=1&theme=dark)\n[![Open in Github gh-pages](https://img.shields.io/badge/Open%20In-Github%20gh--pages-blue?logo=github)](https://uiwjs.github.io/react-md-editor/)\n[![Open in Gitee gh-pages](https://img.shields.io/badge/Open%20In-Gitee%20gh--pages-blue?logo=web)](https://uiw.gitee.io/react-md-editor/)\n\n```jsx mdx:preview\nimport React from \"react\";\nimport MDEditor from '@uiw/react-md-editor';\n\nexport default function App() {\n  const [value, setValue] = React.useState(\"**Hello world!!!**\");\n  return (\n    <div className=\"container\">\n      <MDEditor\n        value={value}\n        onChange={setValue}\n      />\n      <MDEditor.Markdown source={value} style={{ whiteSpace: 'pre-wrap' }} />\n    </div>\n  );\n}\n```\n\n### Special Markdown syntax\n\n**Supports for CSS Style**\n\nUse HTML comments `<!--rehype:xxx-->`<!--rehype:style=color: red; font-weight: bold;--> to let Markdown support style customization.\n\n```markdown\n## Title\n<!--rehype:style=display: flex; height: 230px; align-items: center; justify-content: center; font-size: 38px;-->\n\nMarkdown Supports **Style**<!--rehype:style=color: red;-->\n```\n\n**Ignore content display via HTML comments**\n\nShown in GitHub readme, excluded in HTML.\n\n```markdown\n# Hello World\n\n<!--rehype:ignore:start-->Hello World<!--rehype:ignore:end-->\n\nGood!\n```\n\nOutput:\n\n```html\n<h1>Hello World</h1>\n\n<p>Good!</p>\n```\n\n### Security\n\nPlease note markdown needs to be sanitized if you do not **completely trust** your authors.\nOtherwise, your app is vulnerable to XSS. This can be achieved by adding [rehype-sanitize](https://github.com/rehypejs/rehype-sanitize) as a plugin.\n\n```jsx mdx:preview\nimport React from \"react\";\nimport MDEditor from '@uiw/react-md-editor';\nimport rehypeSanitize from \"rehype-sanitize\";\n\nexport default function App() {\n  const [value, setValue] = React.useState(`**Hello world!!!** <IFRAME SRC=\\\"javascript:javascript:alert(window.origin);\\\"></IFRAME>`);\n  return (\n    <div className=\"container\">\n      <MDEditor\n        value={value}\n        onChange={setValue}\n        previewOptions={{\n          rehypePlugins: [[rehypeSanitize]],\n        }}\n      />\n    </div>\n  );\n}\n```\n\n### Remove Code Highlight\n\nThe following example can help you _exclude code highlighting code_<!--rehype:style=color: #333;background-color: rgb(196 255 122 / 86%);--> from being included in the bundle. `@uiw/react-md-editor/nohighlight`<!--rehype:style=color: #e24444;--> component does not contain the ~~`rehype-prism-plus`~~ code highlighting package, ~~`highlightEnable`~~, ~~`showLineNumbers`~~ and ~~`highlight line`~~ functions will no longer work. ([#586](https://github.com/uiwjs/react-md-editor/issues/586))\n\n```jsx mdx:preview\nimport React from \"react\";\nimport MDEditor from '@uiw/react-md-editor/nohighlight';\n\nconst code = `**Hello world!!!**\n\\`\\`\\`js\nfunction demo() {}\n\\`\\`\\`\n`\n\nexport default function App() {\n  const [value, setValue] = React.useState(code);\n  return (\n    <div className=\"container\">\n      <MDEditor\n        value={value}\n        onChange={setValue}\n      />\n      <MDEditor.Markdown source={value} style={{ whiteSpace: 'pre-wrap' }} />\n    </div>\n  );\n}\n```\n\n### Custom Toolbars\n\n[![Open in CodeSandbox](https://img.shields.io/badge/Open%20in-CodeSandbox-blue?logo=codesandbox)](https://codesandbox.io/embed/react-md-editor-custom-toolbars-m2n10?fontsize=14&hidenavigation=1&theme=dark)\n\n```jsx mdx:preview\nimport React, { useState } from \"react\";\nimport MDEditor, { commands } from '@uiw/react-md-editor';\n\nconst title3 = {\n  name: 'title3',\n  keyCommand: 'title3',\n  buttonProps: { 'aria-label': 'Insert title3' },\n  icon: (\n    <svg width=\"12\" height=\"12\" viewBox=\"0 0 520 520\">\n      <path fill=\"currentColor\" d=\"M15.7083333,468 C7.03242448,468 0,462.030833 0,454.666667 L0,421.333333 C0,413.969167 7.03242448,408 15.7083333,408 L361.291667,408 C369.967576,408 377,413.969167 377,421.333333 L377,454.666667 C377,462.030833 369.967576,468 361.291667,468 L15.7083333,468 Z M21.6666667,366 C9.69989583,366 0,359.831861 0,352.222222 L0,317.777778 C0,310.168139 9.69989583,304 21.6666667,304 L498.333333,304 C510.300104,304 520,310.168139 520,317.777778 L520,352.222222 C520,359.831861 510.300104,366 498.333333,366 L21.6666667,366 Z M136.835938,64 L136.835937,126 L107.25,126 L107.25,251 L40.75,251 L40.75,126 L-5.68434189e-14,126 L-5.68434189e-14,64 L136.835938,64 Z M212,64 L212,251 L161.648438,251 L161.648438,64 L212,64 Z M378,64 L378,126 L343.25,126 L343.25,251 L281.75,251 L281.75,126 L238,126 L238,64 L378,64 Z M449.047619,189.550781 L520,189.550781 L520,251 L405,251 L405,64 L449.047619,64 L449.047619,189.550781 Z\" />\n    </svg>\n  ),\n  execute: (state, api) => {\n    let modifyText = `### ${state.selectedText}\\n`;\n    if (!state.selectedText) {\n      modifyText = `### `;\n    }\n    api.replaceSelection(modifyText);\n  },\n};\n\nconst title2 = {\n  name: 'title2',\n  keyCommand: 'title2',\n  render: (command, disabled, executeCommand) => {\n    return (\n      <button \n        aria-label=\"Insert title2\"\n        disabled={disabled}\n        onClick={(evn) => {\n          // evn.stopPropagation();\n          executeCommand(command, command.groupName)\n        }}\n      >\n        <svg width=\"12\" height=\"12\" viewBox=\"0 0 520 520\">\n          <path fill=\"currentColor\" d=\"M15.7083333,468 C7.03242448,468 0,462.030833 0,454.666667 L0,421.333333 C0,413.969167 7.03242448,408 15.7083333,408 L361.291667,408 C369.967576,408 377,413.969167 377,421.333333 L377,454.666667 C377,462.030833 369.967576,468 361.291667,468 L15.7083333,468 Z M21.6666667,366 C9.69989583,366 0,359.831861 0,352.222222 L0,317.777778 C0,310.168139 9.69989583,304 21.6666667,304 L498.333333,304 C510.300104,304 520,310.168139 520,317.777778 L520,352.222222 C520,359.831861 510.300104,366 498.333333,366 L21.6666667,366 Z M136.835938,64 L136.835937,126 L107.25,126 L107.25,251 L40.75,251 L40.75,126 L-5.68434189e-14,126 L-5.68434189e-14,64 L136.835938,64 Z M212,64 L212,251 L161.648438,251 L161.648438,64 L212,64 Z M378,64 L378,126 L343.25,126 L343.25,251 L281.75,251 L281.75,126 L238,126 L238,64 L378,64 Z M449.047619,189.550781 L520,189.550781 L520,251 L405,251 L405,64 L449.047619,64 L449.047619,189.550781 Z\" />\n        </svg>\n      </button>\n    )\n  },\n  execute: (state, api) => {\n    let modifyText = `## ${state.selectedText}\\n`;\n    if (!state.selectedText) {\n      modifyText = `## `;\n    }\n    api.replaceSelection(modifyText);\n  },\n}\n\nfunction SubChildren({ close, execute, getState, textApi, dispatch }) {\n  const [value, setValue] = useState('')\n  const insert = () => {\n    console.log('value:::', value)\n    textApi.replaceSelection(value)\n  }\n  return (\n    <div style={{ width: 120, padding: 10 }}>\n      <div>My Custom Toolbar</div>\n      <input type=\"text\" onChange={(e) => setValue(e.target.value)} />\n      <button\n        type=\"button\"\n        onClick={() => {\n          dispatch({ $value: '~~~~~~' })\n          console.log('> execute: >>>>>', getState())\n        }}\n      >\n        State\n      </button>\n      <button type=\"button\" onClick={insert}>Insert</button>\n      <button type=\"button\" onClick={() => close()}>Close</button>\n      <button type=\"button\" onClick={() => execute()}>Execute</button>\n    </div>\n  );\n}\n\nconst subChild = {\n  name: 'update',\n  groupName: 'update',\n  icon: (\n    <svg viewBox=\"0 0 1024 1024\" width=\"12\" height=\"12\">\n      <path fill=\"currentColor\" d=\"M716.8 921.6a51.2 51.2 0 1 1 0 102.4H307.2a51.2 51.2 0 1 1 0-102.4h409.6zM475.8016 382.1568a51.2 51.2 0 0 1 72.3968 0l144.8448 144.8448a51.2 51.2 0 0 1-72.448 72.3968L563.2 541.952V768a51.2 51.2 0 0 1-45.2096 50.8416L512 819.2a51.2 51.2 0 0 1-51.2-51.2v-226.048l-57.3952 57.4464a51.2 51.2 0 0 1-67.584 4.2496l-4.864-4.2496a51.2 51.2 0 0 1 0-72.3968zM512 0c138.6496 0 253.4912 102.144 277.1456 236.288l10.752 0.3072C924.928 242.688 1024 348.0576 1024 476.5696 1024 608.9728 918.8352 716.8 788.48 716.8a51.2 51.2 0 1 1 0-102.4l8.3968-0.256C866.2016 609.6384 921.6 550.0416 921.6 476.5696c0-76.4416-59.904-137.8816-133.12-137.8816h-97.28v-51.2C691.2 184.9856 610.6624 102.4 512 102.4S332.8 184.9856 332.8 287.488v51.2H235.52c-73.216 0-133.12 61.44-133.12 137.8816C102.4 552.96 162.304 614.4 235.52 614.4l5.9904 0.3584A51.2 51.2 0 0 1 235.52 716.8C105.1648 716.8 0 608.9728 0 476.5696c0-132.1984 104.8064-239.872 234.8544-240.2816C258.5088 102.144 373.3504 0 512 0z\" />\n    </svg>\n  ),\n  children: (props) => <SubChildren {...props} />,\n  execute: (state, api)  => {\n    console.log('>>>>>>update>>>>>', state)\n  },\n  buttonProps: { 'aria-label': 'Insert title'}\n}\n\nexport default function App() {\n  const [value, setValue] = React.useState(\"Hello Markdown! `Tab` key uses default behavior\");\n  return (\n    <div className=\"container\">\n      <MDEditor\n        value={value}\n        onChange={setValue}\n        commands={[\n          // Custom Toolbars\n          title3, title2,\n          commands.group([commands.title1, commands.title2, commands.title3, commands.title4, commands.title5, commands.title6], {\n            name: 'title',\n            groupName: 'title',\n            buttonProps: { 'aria-label': 'Insert title'}\n          }),\n          commands.divider,\n          commands.group([], subChild),\n        ]}\n      />\n    </div>\n  );\n}\n```\n\nCustomize the toolbar with `commands` and `extraCommands` props.\n\n```jsx mdx:preview\nimport React from \"react\";\nimport MDEditor, { commands } from '@uiw/react-md-editor';\n\nexport default function App() {\n  const [value, setValue] = React.useState(\"Hello Markdown! `Tab` key uses default behavior\");\n  return (\n    <div className=\"container\">\n      <MDEditor\n        value={value}\n        onChange={setValue}\n        preview=\"edit\"\n        commands={[\n          commands.codeEdit, commands.codePreview\n        ]}\n        extraCommands={[\n          commands.group([commands.title1, commands.title2, commands.title3, commands.title4, commands.title5, commands.title6], {\n            name: 'title',\n            groupName: 'title',\n            buttonProps: { 'aria-label': 'Insert title'}\n          }),\n          commands.divider,\n          commands.group([], {\n            name: 'update',\n            groupName: 'update',\n            icon: (\n              <svg viewBox=\"0 0 1024 1024\" width=\"12\" height=\"12\">\n                <path fill=\"currentColor\" d=\"M716.8 921.6a51.2 51.2 0 1 1 0 102.4H307.2a51.2 51.2 0 1 1 0-102.4h409.6zM475.8016 382.1568a51.2 51.2 0 0 1 72.3968 0l144.8448 144.8448a51.2 51.2 0 0 1-72.448 72.3968L563.2 541.952V768a51.2 51.2 0 0 1-45.2096 50.8416L512 819.2a51.2 51.2 0 0 1-51.2-51.2v-226.048l-57.3952 57.4464a51.2 51.2 0 0 1-67.584 4.2496l-4.864-4.2496a51.2 51.2 0 0 1 0-72.3968zM512 0c138.6496 0 253.4912 102.144 277.1456 236.288l10.752 0.3072C924.928 242.688 1024 348.0576 1024 476.5696 1024 608.9728 918.8352 716.8 788.48 716.8a51.2 51.2 0 1 1 0-102.4l8.3968-0.256C866.2016 609.6384 921.6 550.0416 921.6 476.5696c0-76.4416-59.904-137.8816-133.12-137.8816h-97.28v-51.2C691.2 184.9856 610.6624 102.4 512 102.4S332.8 184.9856 332.8 287.488v51.2H235.52c-73.216 0-133.12 61.44-133.12 137.8816C102.4 552.96 162.304 614.4 235.52 614.4l5.9904 0.3584A51.2 51.2 0 0 1 235.52 716.8C105.1648 716.8 0 608.9728 0 476.5696c0-132.1984 104.8064-239.872 234.8544-240.2816C258.5088 102.144 373.3504 0 512 0z\" />\n              </svg>\n            ),\n            children: ({ close, execute, getState, textApi }) => {\n              return (\n                <div style={{ width: 120, padding: 10 }}>\n                  <div>My Custom Toolbar</div>\n                  <button type=\"button\" onClick={() => console.log('> execute: >>>>>', getState())}>State</button>\n                  <button type=\"button\" onClick={() => close()}>Close</button>\n                  <button type=\"button\" onClick={() => execute()}>Execute</button>\n                </div>\n              );\n            },\n            execute: (state, api)  => {\n              console.log('>>>>>>update>>>>>', state)\n            },\n            buttonProps: { 'aria-label': 'Insert title'}\n          }),\n          commands.divider, commands.fullscreen\n        ]}\n      />\n    </div>\n  );\n}\n```\n\nre-render `toolbar` element.\n\n```jsx mdx:preview\nimport React from \"react\";\nimport MDEditor, { commands } from '@uiw/react-md-editor';\n\nexport default function App() {\n  const [value, setValue] = React.useState(\"Hello Markdown! `Tab` key uses default behavior\");\n  return (\n    <div className=\"container\">\n      <MDEditor\n        value={value}\n        onChange={setValue}\n        preview=\"edit\"\n        components={{\n          toolbar: (command, disabled, executeCommand) => {\n            if (command.keyCommand === 'code') {\n              return (\n                <button \n                  aria-label=\"Insert code\"\n                  disabled={disabled}\n                  onClick={(evn) => {\n                    evn.stopPropagation();\n                    executeCommand(command, command.groupName)\n                  }}\n                >\n                  Code\n                </button>\n              )\n            }\n          }\n        }}\n      />\n    </div>\n  );\n}\n```\n\nCustom Preview Command Tool\n\n[![Open in CodeSandbox](https://img.shields.io/badge/Open%20in-CodeSandbox-blue?logo=codesandbox)](https://codesandbox.io/embed/react-md-editor-custom-toolbars-https-github-com-uiwjs-react-md-editor-issues-433-9mwuob?fontsize=14&hidenavigation=1&theme=dark)\n\n```jsx mdx:preview\nimport React, { useContext } from \"react\";\nimport MDEditor, { commands, EditorContext } from \"@uiw/react-md-editor\";\n\nconst Button = () => {\n  const { preview, dispatch } = useContext(EditorContext);\n  const click = () => {\n    dispatch({\n      preview: preview === \"edit\" ? \"preview\" : \"edit\"\n    });\n  };\n  if (preview === \"edit\") {\n    return (\n      <svg width=\"12\" height=\"12\" viewBox=\"0 0 520 520\" onClick={click}>\n        <polygon\n          fill=\"currentColor\"\n          points=\"0 71.293 0 122 319 122 319 397 0 397 0 449.707 372 449.413 372 71.293\"\n        />\n        <polygon\n          fill=\"currentColor\"\n          points=\"429 71.293 520 71.293 520 122 481 123 481 396 520 396 520 449.707 429 449.413\"\n        />\n      </svg>\n    );\n  }\n  return (\n    <svg width=\"12\" height=\"12\" viewBox=\"0 0 520 520\" onClick={click}>\n      <polygon\n        fill=\"currentColor\"\n        points=\"0 71.293 0 122 38.023 123 38.023 398 0 397 0 449.707 91.023 450.413 91.023 72.293\"\n      />\n      <polygon\n        fill=\"currentColor\"\n        points=\"148.023 72.293 520 71.293 520 122 200.023 124 200.023 397 520 396 520 449.707 148.023 450.413\"\n      />\n    </svg>\n  );\n};\n\nconst codePreview = {\n  name: \"preview\",\n  keyCommand: \"preview\",\n  value: \"preview\",\n  icon: <Button />\n};\n\nconst Disable = () => {\n  const { preview, dispatch } = useContext(EditorContext);\n  return (\n    <button disabled={preview === \"preview\"}>\n      <svg viewBox=\"0 0 16 16\" width=\"12px\" height=\"12px\">\n        <path\n          d=\"M8 0C3.6 0 0 3.6 0 8s3.6 8 8 8 8-3.6 8-8-3.6-8-8-8Zm.9 13H7v-1.8h1.9V13Zm-.1-3.6v.5H7.1v-.6c.2-2.1 2-1.9 1.9-3.2.1-.7-.3-1.1-1-1.1-.8 0-1.2.7-1.2 1.6H5c0-1.7 1.2-3 2.9-3 2.3 0 3 1.4 3 2.3.1 2.3-1.9 2-2.1 3.5Z\"\n          fill=\"currentColor\"\n        />\n      </svg>\n    </button>\n  )\n}\n\nconst customButton = {\n  name: \"disable\",\n  keyCommand: \"disable\",\n  value: \"disable\",\n  icon: <Disable />\n}\n\nexport default function App() {\n  const [value, setValue] = React.useState(\"**Hello world!!!**\");\n  return (\n    <div className=\"container\">\n      <div>The system automatically sets the theme</div>\n      <MDEditor\n        value={value}\n        preview=\"edit\"\n        extraCommands={[codePreview, customButton, commands.fullscreen]}\n        onChange={(val) => setValue(val)}\n      />\n    </div>\n  );\n}\n```\n\nAdd Help Command Tool\n\n[![Open in CodeSandbox](https://img.shields.io/badge/Open%20in-CodeSandbox-blue?logo=codesandbox)](https://codesandbox.io/embed/markdown-editor-for-react-https-github-com-uiwjs-react-md-editor-issues-530-add-help-command-tool-fpnj22?fontsize=14&hidenavigation=1&theme=dark)\n\n```jsx mdx:preview\nimport React, { useContext } from \"react\";\nimport MDEditor, { commands } from \"@uiw/react-md-editor\";\n\nconst help = {\n  name: \"help\",\n  keyCommand: \"help\",\n  buttonProps: { \"aria-label\": \"Insert help\" },\n  icon: (\n    <svg viewBox=\"0 0 16 16\" width=\"12px\" height=\"12px\">\n      <path\n        d=\"M8 0C3.6 0 0 3.6 0 8s3.6 8 8 8 8-3.6 8-8-3.6-8-8-8Zm.9 13H7v-1.8h1.9V13Zm-.1-3.6v.5H7.1v-.6c.2-2.1 2-1.9 1.9-3.2.1-.7-.3-1.1-1-1.1-.8 0-1.2.7-1.2 1.6H5c0-1.7 1.2-3 2.9-3 2.3 0 3 1.4 3 2.3.1 2.3-1.9 2-2.1 3.5Z\"\n        fill=\"currentColor\"\n      />\n    </svg>\n  ),\n  execute: (state, api) => {\n    window.open(\"https://www.markdownguide.org/basic-syntax/\", \"_blank\");\n  }\n};\n\nexport default function App() {\n  const [value, setValue] = React.useState(\"**Hello world!!!**\");\n  return (\n    <MDEditor\n      value={value}\n      preview=\"edit\"\n      commands={[...commands.getCommands(), help]}\n      onChange={(val) => setValue(val)}\n    />\n  );\n}\n```\n\n### Editor Font Size\n\n[![Open in CodeSandbox](https://img.shields.io/badge/Open%20in-CodeSandbox-blue?logo=codesandbox)](https://codesandbox.io/embed/markdown-editor-for-react-uiwjs-react-md-editor-issues-425-2epmgh?fontsize=14&hidenavigation=1&theme=dark)\n[![#425](https://img.shields.io/github/issues/detail/state/uiwjs/react-md-editor/425)](https://github.com/uiwjs/react-md-editor/issues/425#issuecomment-1209514536)\n\n```css\nbody .w-md-editor-text-pre > code,\nbody .w-md-editor-text-input {\n  font-size: 23px !important;\n  line-height: 24px !important;\n}\n```\n\n### Editor height adapts to text\n\nThe initial height can be adjusted through `minHeight={100}`. Dragbar will automatically expire. You can hide the drag button through `visibleDragbar={false}`\n\n```jsx mdx:preview\nimport React from \"react\";\nimport MDEditor from '@uiw/react-md-editor';\n\nexport default function App() {\n  const [value, setValue] = React.useState(\"**Hello world!!!**\");\n  return (\n    <div className=\"container\">\n      <MDEditor\n        value={value}\n        height=\"100%\"\n        // minHeight={50}\n        visibleDragbar={false}\n        onChange={setValue}\n      />\n    </div>\n  );\n}\n```\n\n### Preview Markdown\n\n[![Open in CodeSandbox](https://img.shields.io/badge/Open%20in-CodeSandbox-blue?logo=codesandbox)](https://codesandbox.io/embed/react-md-editor-preview-markdown-vrucl?fontsize=14&hidenavigation=1&theme=dark)\n\n```jsx mdx:preview\nimport React from \"react\";\nimport MDEditor from '@uiw/react-md-editor';\n\nexport default function App() {\n  return (\n    <div className=\"container\">\n      <MDEditor.Markdown source=\"Hello Markdown!\" />\n    </div>\n  );\n}\n```\n\n### Support Custom KaTeX Preview\n\nKaTeX is a fast, easy-to-use JavaScript library for TeX math rendering on the web, We perform math rendering through [`KaTeX`](https://github.com/KaTeX/KaTeX).\n\nThe following example is preview in [CodeSandbox](https://codesandbox.io/s/markdown-editor-katex-for-react-7v3vl).\n\n[![Open in CodeSandbox](https://img.shields.io/badge/Open%20in-CodeSandbox-blue?logo=codesandbox)](https://codesandbox.io/embed/headless-frog-em8yg?fontsize=14&hidenavigation=1&theme=dark)\n\n> ‚ö†Ô∏è Upgrade v2 to v3 [d025430](https://github.com/uiwjs/react-md-editor/blob/7b9f11ab689a7ea288df3e82c26f4f0e9a53d271/website/ExmapleKaTeX.tsx#L1-L63)\n\n```bash\nnpm install katex\n```\n\n```jsx mdx:preview\nimport React from \"react\";\nimport MDEditor from '@uiw/react-md-editor';\nimport { getCodeString } from 'rehype-rewrite';\nimport katex from 'katex';\nimport 'katex/dist/katex.css';\n\nconst mdKaTeX = `This is to display the \n\\`\\$\\$\\c = \\\\pm\\\\sqrt{a^2 + b^2}\\$\\$\\`\n in one line\n\n\\`\\`\\`KaTeX\nc = \\\\pm\\\\sqrt{a^2 + b^2}\n\\`\\`\\`\n`;\n\nexport default function App() {\n  const [value, setValue] = React.useState(mdKaTeX);\n  return (\n    <MDEditor\n      value={value}\n      onChange={(val) => setValue(val)}\n      previewOptions={{\n        components: {\n          code: ({ children = [], className, ...props }) => {\n            if (typeof children === 'string' && /^\\$\\$(.*)\\$\\$/.test(children)) {\n              const html = katex.renderToString(children.replace(/^\\$\\$(.*)\\$\\$/, '$1'), {\n                throwOnError: false,\n              });\n              return <code dangerouslySetInnerHTML={{ __html: html }} style={{ background: 'transparent' }} />;\n            }\n            const code = props.node && props.node.children ? getCodeString(props.node.children) : children;\n            if (\n              typeof code === 'string' &&\n              typeof className === 'string' &&\n              /^language-katex/.test(className.toLocaleLowerCase())\n            ) {\n              const html = katex.renderToString(code, {\n                throwOnError: false,\n              });\n              return <code style={{ fontSize: '150%' }} dangerouslySetInnerHTML={{ __html: html }} />;\n            }\n            return <code className={String(className)}>{children}</code>;\n          },\n        },\n      }}\n    />\n  );\n}\n```\n\n### Markdown text to Image\n\n[![Open in CodeSandbox](https://img.shields.io/badge/Open%20in-CodeSandbox-blue?logo=codesandbox)](https://codesandbox.io/embed/react-md-editor-text-to-images-ijqmx?fontsize=14&hidenavigation=1&theme=dark)\n\n```tsx mdx:preview\nimport React, { useState } from \"react\";\nimport MDEditor, { commands, ICommand, TextState, TextAreaTextApi } from \"@uiw/react-md-editor\";\nimport domToImage from \"dom-to-image\";\n\nconst textToImage: ICommand = {\n  name: \"Text To Image\",\n  keyCommand: \"text2image\",\n  buttonProps: { \"aria-label\": \"Insert title3\" },\n  icon: (\n    <svg width=\"12\" height=\"12\" viewBox=\"0 0 20 20\">\n      <path fill=\"currentColor\" d=\"M15 9c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm4-7H1c-.55 0-1 .45-1 1v14c0 .55.45 1 1 1h18c.55 0 1-.45 1-1V3c0-.55-.45-1-1-1zm-1 13l-6-5-2 2-4-5-4 8V4h16v11z\" ></path>\n    </svg>\n  ),\n  execute: (state: TextState, api: TextAreaTextApi) => {\n    const dom = document.getElementsByClassName(\"gooooooooo\")[0];\n    if (dom) {\n      domToImage.toJpeg(dom, {}).then((dataUrl) => {\n        const link = document.createElement(\"a\");\n        link.download = \"image.jpg\";\n        link.href = dataUrl;\n        link.click();\n      });\n    }\n  }\n};\n\nexport default function App() {\n  const [value, setValue] = useState('**Hello world!!!**');\n  console.log('value::', value)\n  return (\n    <div className=\"container\">\n      <MDEditor\n        className=\"gooooooooo\"\n        onChange={(newValue = \"\") => setValue(newValue)}\n        value={value}\n        commands={[\n          textToImage,\n          commands.divider\n        ]}\n      />\n    </div>\n  );\n}\n```\n\n### Support Custom Mermaid Preview\n\nUsing [mermaid](https://github.com/mermaid-js/mermaid) to generation of diagram and flowchart from text in a similar manner as markdown\n\n[![Open in CodeSandbox](https://img.shields.io/badge/Open%20in-CodeSandbox-blue?logo=codesandbox)](https://codesandbox.io/embed/recursing-water-08i59s?fontsize=14&hidenavigation=1&theme=dark)\n\n```bash\nnpm install mermaid\n```\n\n```jsx mdx:preview\nimport React, { useState, useRef, useEffect, Fragment, useCallback } from \"react\";\nimport MDEditor from \"@uiw/react-md-editor\";\nimport { getCodeString } from 'rehype-rewrite';\nimport mermaid from \"mermaid\";\n\nconst mdMermaid = `The following are some examples of the diagrams, charts and graphs that can be made using Mermaid and the Markdown-inspired text specific to it. \n\n\\`\\`\\`mermaid\ngraph TD\nA[Hard] -->|Text| B(Round)\nB --> C{Decision}\nC -->|One| D[Result 1]\nC -->|Two| E[Result 2]\n\\`\\`\\`\n\n\\`\\`\\`mermaid\nsequenceDiagram\nAlice->>John: Hello John, how are you?\nloop Healthcheck\n    John->>John: Fight against hypochondria\nend\nNote right of John: Rational thoughts!\nJohn-->>Alice: Great!\nJohn->>Bob: How about you?\nBob-->>John: Jolly good!\n\\`\\`\\`\n`;\n\nconst randomid = () => parseInt(String(Math.random() * 1e15), 10).toString(36);\nconst Code = ({ inline, children = [], className, ...props }) => {\n  const demoid = useRef(`dome${randomid()}`);\n  const [container, setContainer] = useState(null);\n  const isMermaid =\n    className && /^language-mermaid/.test(className.toLocaleLowerCase());\n  const code = children\n    ? getCodeString(props.node.children)\n    : children[0] || \"\";\n\n  useEffect(() => {\n    if (container && isMermaid && demoid.current && code) {\n      mermaid\n        .render(demoid.current, code)\n        .then(({ svg, bindFunctions }) => {\n          container.innerHTML = svg;\n          if (bindFunctions) {\n            bindFunctions(container);\n          }\n        })\n        .catch((error) => {\n          console.log(\"error:\", error);\n        });\n    }\n  }, [container, isMermaid, code, demoid]);\n\n  const refElement = useCallback((node) => {\n    if (node !== null) {\n      setContainer(node);\n    }\n  }, []);\n\n  if (isMermaid) {\n    return (\n      <Fragment>\n        <code id={demoid.current} style={{ display: \"none\" }} />\n        <code className={className} ref={refElement} data-name=\"mermaid\" />\n      </Fragment>\n    );\n  }\n  return <code className={className}>{children}</code>;\n};\n\nexport default function App() {\n  const [value, setValue] = useState(mdMermaid);\n  return (\n    <MDEditor\n      onChange={(newValue = \"\") => setValue(newValue)}\n      textareaProps={{\n        placeholder: \"Please enter Markdown text\"\n      }}\n      height={500}\n      value={value}\n      previewOptions={{\n        components: {\n          code: Code\n        }\n      }}\n    />\n  );\n}\n```\n\n### Support Nextjs\n\nUse examples in [nextjs](https://nextjs.org/). [`#52`](https://github.com/uiwjs/react-md-editor/issues/52#issuecomment-848969341) [`#224`](https://github.com/uiwjs/react-md-editor/issues/224#issuecomment-901112079)\n\n[![Open in CodeSandbox](https://img.shields.io/badge/Open%20in-CodeSandbox-blue?logo=codesandbox)](https://codesandbox.io/embed/nextjs-example-react-md-editor-https-github-com-uiwjs-react-md-editor-issues-516-1z56px?fontsize=14&hidenavigation=1&theme=dark)\n[![Open in CodeSandbox](https://img.shields.io/badge/Open%20in-CodeSandbox-blue?logo=codesandbox)](https://codesandbox.io/embed/nextjs-example-react-md-editor-qjhn7?fontsize=14&hidenavigation=1&theme=dark) [![Open in StackBlitz](https://img.shields.io/badge/Open%20In-StackBlitz-green)](https://stackblitz.com/edit/nextjs-react-md-editor?embed=1&file=pages/index.js&hideExplorer=1&hideNavigation=1&theme=dark)\n[![#52](https://img.shields.io/github/issues/detail/state/uiwjs/react-md-editor/52)](https://github.com/uiwjs/react-md-editor/issues/52#issuecomment-848969341)\n[![#224](https://img.shields.io/github/issues/detail/state/uiwjs/react-md-editor/224)](https://github.com/uiwjs/react-md-editor/issues/224#issuecomment-901112079)\n\n```bash\nnpm install next-remove-imports\nnpm install @uiw/react-md-editor@v3.6.0\n```\n\n```js\n// next.config.js\nconst removeImports = require('next-remove-imports')();\nmodule.exports = removeImports({});\n```\n\n```jsx\nimport \"@uiw/react-md-editor/markdown-editor.css\";\nimport \"@uiw/react-markdown-preview/markdown.css\";\nimport dynamic from \"next/dynamic\";\nimport { useState } from \"react\";\n\nimport * as commands from \"@uiw/react-md-editor/commands\"\n\nconst MDEditor = dynamic(\n  () => import(\"@uiw/react-md-editor\"),\n  { ssr: false }\n);\n\nfunction HomePage() {\n  const [value, setValue] = useState(\"**Hello world!!!**\");\n  return (\n    <div>\n      <MDEditor value={value} onChange={setValue} />\n    </div>\n  );\n}\n\nexport default HomePage;\n```\n\n### Support dark-mode/night-mode\n\nBy default, the [`dark-mode`](https://github.com/jaywcjlove/dark-mode/) is automatically switched according to the system. If you need to switch manually, just set the `data-color-mode=\"dark\"` parameter for body. \n\n```html\n<html data-color-mode=\"dark\">\n```\n\n```js\ndocument.documentElement.setAttribute('data-color-mode', 'dark')\ndocument.documentElement.setAttribute('data-color-mode', 'light')\n```\n\nInherit custom color variables by adding [`.wmde-markdown-var`](https://github.com/uiwjs/react-markdown-preview/blob/a53be1e93fb1c2327649c4a6b084adb80679affa/src/styles/markdown.less#L1-L193) selector. Setting theme styles with `data-color-mode=\"light\"`.\n\n```html\n<div data-color-mode=\"light\">\n  <div className=\"wmde-markdown-var\"> </div>\n  <MDEditor source=\"Hello World!\" />\n</div>\n```\n\n### Props\n\n- `value: string`: The Markdown value.\n- `onChange?: (value?: string, event?: React.ChangeEvent<HTMLTextAreaElement>, state?: ContextStore)`: Event handler for the `onChange` event.\n- `onHeightChange?: ((value?: CSSProperties['height'], oldValue?: CSSProperties['height'], state?: ContextStore)`: editor height change listener.\n- `onStatistics?: (data: Statistics) => void;` Some data on the statistics editor.\n- `commands?: ICommand[]`: An array of [`ICommand`](https://github.com/uiwjs/react-md-editor/blob/d02543050c9abd8f7c72ae02b6421ac2e6ae421a/src/commands/index.ts#L39-L57), which, each one, contain a [`commands`](https://github.com/uiwjs/react-md-editor/blob/d02543050c9abd8f7c72ae02b6421ac2e6ae421a/src/commands/index.ts#L155-L180) property. If no commands are specified, the default will be used. Commands are explained in more details below.\n- `commandsFilter?: (command: ICommand, isExtra: boolean) => false | ICommand`: Filter or modify your commands.\n- `extraCommands?: ICommand[]`: Displayed on the right side of the toolbar.\n- `autoFocus?: true`: Can be used to make `Markdown Editor` focus itself on initialization.\n- `previewOptions?: ReactMarkdown.ReactMarkdownProps`: This is reset [@uiw/react-markdown-preview](https://github.com/uiwjs/react-markdown-preview/tree/0036dd51a25c00d5be6dc83aa978905c64750038?tab=readme-ov-file#options-props) settings.\n- `textareaProps?: TextareaHTMLAttributes`: Set the `textarea` related props.\n- ~~`renderTextarea?: (props, opts) => JSX.Element;`~~: `@deprecated` Please use ~~`renderTextarea`~~ -> `components`. Use div to replace TextArea or re-render TextArea. [#193](https://github.com/uiwjs/react-md-editor/issues/193)\n- `components`: re-render textarea/toolbar element. [#419](https://github.com/uiwjs/react-md-editor/issues/419)\n    - `textarea` Use div to replace TextArea or re-render TextArea\n    - `toolbar` Override the default command element. _`toolbar`_ < _`command[].render`_\n    - `preview` Custom markdown preview. [#429](https://github.com/uiwjs/react-md-editor/issues/429)\n- `height?: number=200`: The height of the editor. Ô∏è‚ö†Ô∏è `Dragbar` is invalid when **`height`** parameter percentage.\n- `visibleDragbar?: boolean=true`: Show drag and drop tool. Set the height of the editor.\n- `highlightEnable?: boolean=true`: Disable editing area code highlighting. The value is `false`, which increases the editing speed.\n- `fullscreen?: boolean=false`: Show markdown preview.\n- `overflow?: boolean=true`: Disable `fullscreen` setting body styles\n- `preview?: 'live' | 'edit' | 'preview'`: Default value `live`, Show markdown preview.\n- `maxHeight?: number=1200`: Maximum drag height. The `visibleDragbar=true` value is valid.\n- `minHeights?: number=100`: Minimum drag height. The `visibleDragbar=true` value is valid.\n- `tabSize?: number=2`: The number of characters to insert when pressing tab key. Default `2` spaces.\n- `defaultTabEnable?: boolean=false`: If `false`, the `tab` key inserts a tab character into the textarea. If `true`, the `tab` key executes default behavior e.g. focus shifts to next element. \n- `hideToolbar?: boolean=false`: Option to hide the tool bar.\n- `enableScroll?: boolean=true`: Whether to enable scrolling.\n\n### Development\n\n1. Install dependencies\n\n```bash\n$ npm install       # Installation dependencies\n$ npm run build     # Compile all package\n```\n\n2. Development `@uiw/react-md-editor` package:\n\n```bash\n$ cd core\n# listen to the component compile and output the .js file\n# listen for compilation output type .d.ts file\n$ npm run watch # Monitor the compiled package `@uiw/react-md-editor`\n```\n\n3. Launch documentation site\n\n```bash\nnpm run start\n```\n\n### Related\n\n- [@uiw/react-textarea-code-editor](https://github.com/uiwjs/react-textarea-code-editor): A simple code editor with syntax highlighting.\n- [@uiw/react-md-editor](https://github.com/uiwjs/react-md-editor): A simple markdown editor with preview, implemented with React.js and TypeScript.\n- [@uiw/react-codemirror](https://github.com/uiwjs/react-codemirror): CodeMirror component for React. @codemirror\n- [@uiw/react-monacoeditor](https://github.com/jaywcjlove/react-monacoeditor): Monaco Editor component for React.\n- [@uiw/react-markdown-editor](https://github.com/uiwjs/react-markdown-editor): A markdown editor with preview, implemented with React.js and TypeScript.\n- ",
      "author": "Carlene Cannon-Conner",
      "cover": ""
    },
    {
      "date": "Sat Feb 03 2024 20:07:20 GMT+0200 (Eastern European Standard Time)",
      "title": "A simple markdown editor with preview, implemented with React.js and TypeScript.",
      "content": "<!--rehype:ignore:start-->\n<p align=\"center\">\n  <a href=\"https://uiwjs.github.io/npm-unpkg/#/pkg/@uiw/react-md-editor/file/README.md\">\n    <img alt=\"react-md-editor logo\" src=\"https://user-images.githubusercontent.com/1680273/146292033-0e5e57fc-6f3e-4032-9fa6-0de05f239e36.png\">\n  </a>\n</p>\n\n<p align=\"center\">\n  <a href=\"https://jaywcjlove.github.io/#/sponsor\" target=\"__blank\">\n    <img alt=\"Buy me a coffee\" src=\"https://img.shields.io/badge/Buy%20me%20a%20coffee-048754?logo=buymeacoffee\">\n  </a>\n  <a href=\"https://www.npmjs.com/package/@uiw/react-md-editor\" target=\"__blank\">\n    <img alt=\"Downloads\" src=\"https://img.shields.io/npm/dm/@uiw/react-md-editor.svg?style=flat\">\n  </a>\n  <a href=\"https://bundlephobia.com/package/@uiw/react-md-editor\" target=\"__blank\">\n    <img alt=\"npm bundle size\" src=\"https://img.shields.io/bundlephobia/minzip/@uiw/react-md-editor\">\n  </a>\n  <a href=\"https://uiwjs.github.io/react-md-editor/coverage/lcov-report\" target=\"__blank\">\n    <img alt=\"Coverage Status\" src=\"https://uiwjs.github.io/react-md-editor/badges.svg\" />\n  </a>\n  <br />\n  <a href=\"https://github.com/uiwjs/react-md-editor/actions\" target=\"__blank\">\n    <img alt=\"Build & Deploy\" src=\"https://github.com/uiwjs/react-md-editor/actions/workflows/ci.yml/badge.svg\" />\n  </a>\n  <a href=\"https://uiwjs.github.io/npm-unpkg/#/pkg/@uiw/react-md-editor/file/README.md\" target=\"__blank\">\n    <img src=\"https://img.shields.io/badge/Open%20in-unpkg-blue\" alt=\"Open in unpkg\">\n  </a>\n  <a href=\"https://gitee.com/uiw/react-md-editor\" target=\"__blank\">\n    <img alt=\"Gitee\" src=\"https://jaywcjlove.github.io/sb/ico/gitee.svg\">\n  </a>\n  <a href=\"https://www.npmjs.com/package/@uiw/react-md-editor\" target=\"__blank\">\n    <img alt=\"npm version\" src=\"https://img.shields.io/npm/v/@uiw/react-md-editor.svg\">\n  </a>\n</p>\n\n<!--rehype:ignore:end-->\n\nA simple markdown editor with preview, implemented with React.js and TypeScript. This React Component aims to provide a simple Markdown editor with syntax highlighting support. This is based on `textarea` encapsulation, so it does not depend on any modern code editors such as Acs, CodeMirror, Monaco etc.\n\n### Features\n\n- üìë Indent line or selected text by pressing tab key, with customizable indentation.\n- ‚ôªÔ∏è Based on `textarea` encapsulation, does not depend on any modern code editors.\n- üöß Does not depend on the [`uiw`](https://github.com/uiwjs/uiw) component library.\n- üöò Automatic list on new lines.\n- üòª GitHub flavored markdown support.\n- üåí Support dark-mode/night-mode **@v3.11.0+**.\n- üí° Support [next.js](https://github.com/uiwjs/react-md-editor/issues/52#issuecomment-848969341), [Use examples](#support-nextjs) in [next.js](https://nextjs.org/).\n- Line/lines duplication (Ctrl+D) and movement (Alt+UpArrow/DownArrow) **@v3.24.0+**.\n\n### Quick Start\n\n```bash\nnpm i @uiw/react-md-editor\n```\n\n### Using\n\n[![Open in CodeSandbox](https://img.shields.io/badge/Open%20in-CodeSandbox-blue?logo=codesandbox)](https://codesandbox.io/embed/markdown-editor-for-react-izdd6?fontsize=14&hidenavigation=1&theme=dark)\n[![Open in Github gh-pages](https://img.shields.io/badge/Open%20In-Github%20gh--pages-blue?logo=github)](https://uiwjs.github.io/react-md-editor/)\n[![Open in Gitee gh-pages](https://img.shields.io/badge/Open%20In-Gitee%20gh--pages-blue?logo=web)](https://uiw.gitee.io/react-md-editor/)\n\n```jsx mdx:preview\nimport React from \"react\";\nimport MDEditor from '@uiw/react-md-editor';\n\nexport default function App() {\n  const [value, setValue] = React.useState(\"**Hello world!!!**\");\n  return (\n    <div className=\"container\">\n      <MDEditor\n        value={value}\n        onChange={setValue}\n      />\n      <MDEditor.Markdown source={value} style={{ whiteSpace: 'pre-wrap' }} />\n    </div>\n  );\n}\n```\n\n### Special Markdown syntax\n\n**Supports for CSS Style**\n\nUse HTML comments `<!--rehype:xxx-->`<!--rehype:style=color: red; font-weight: bold;--> to let Markdown support style customization.\n\n```markdown\n## Title\n<!--rehype:style=display: flex; height: 230px; align-items: center; justify-content: center; font-size: 38px;-->\n\nMarkdown Supports **Style**<!--rehype:style=color: red;-->\n```\n\n**Ignore content display via HTML comments**\n\nShown in GitHub readme, excluded in HTML.\n\n```markdown\n# Hello World\n\n<!--rehype:ignore:start-->Hello World<!--rehype:ignore:end-->\n\nGood!\n```\n\nOutput:\n\n```html\n<h1>Hello World</h1>\n\n<p>Good!</p>\n```\n\n### Security\n\nPlease note markdown needs to be sanitized if you do not **completely trust** your authors.\nOtherwise, your app is vulnerable to XSS. This can be achieved by adding [rehype-sanitize](https://github.com/rehypejs/rehype-sanitize) as a plugin.\n\n```jsx mdx:preview\nimport React from \"react\";\nimport MDEditor from '@uiw/react-md-editor';\nimport rehypeSanitize from \"rehype-sanitize\";\n\nexport default function App() {\n  const [value, setValue] = React.useState(`**Hello world!!!** <IFRAME SRC=\\\"javascript:javascript:alert(window.origin);\\\"></IFRAME>`);\n  return (\n    <div className=\"container\">\n      <MDEditor\n        value={value}\n        onChange={setValue}\n        previewOptions={{\n          rehypePlugins: [[rehypeSanitize]],\n        }}\n      />\n    </div>\n  );\n}\n```\n\n### Remove Code Highlight\n\nThe following example can help you _exclude code highlighting code_<!--rehype:style=color: #333;background-color: rgb(196 255 122 / 86%);--> from being included in the bundle. `@uiw/react-md-editor/nohighlight`<!--rehype:style=color: #e24444;--> component does not contain the ~~`rehype-prism-plus`~~ code highlighting package, ~~`highlightEnable`~~, ~~`showLineNumbers`~~ and ~~`highlight line`~~ functions will no longer work. ([#586](https://github.com/uiwjs/react-md-editor/issues/586))\n\n```jsx mdx:preview\nimport React from \"react\";\nimport MDEditor from '@uiw/react-md-editor/nohighlight';\n\nconst code = `**Hello world!!!**\n\\`\\`\\`js\nfunction demo() {}\n\\`\\`\\`\n`\n\nexport default function App() {\n  const [value, setValue] = React.useState(code);\n  return (\n    <div className=\"container\">\n      <MDEditor\n        value={value}\n        onChange={setValue}\n      />\n      <MDEditor.Markdown source={value} style={{ whiteSpace: 'pre-wrap' }} />\n    </div>\n  );\n}\n```\n\n### Custom Toolbars\n\n[![Open in CodeSandbox](https://img.shields.io/badge/Open%20in-CodeSandbox-blue?logo=codesandbox)](https://codesandbox.io/embed/react-md-editor-custom-toolbars-m2n10?fontsize=14&hidenavigation=1&theme=dark)\n\n```jsx mdx:preview\nimport React, { useState } from \"react\";\nimport MDEditor, { commands } from '@uiw/react-md-editor';\n\nconst title3 = {\n  name: 'title3',\n  keyCommand: 'title3',\n  buttonProps: { 'aria-label': 'Insert title3' },\n  icon: (\n    <svg width=\"12\" height=\"12\" viewBox=\"0 0 520 520\">\n      <path fill=\"currentColor\" d=\"M15.7083333,468 C7.03242448,468 0,462.030833 0,454.666667 L0,421.333333 C0,413.969167 7.03242448,408 15.7083333,408 L361.291667,408 C369.967576,408 377,413.969167 377,421.333333 L377,454.666667 C377,462.030833 369.967576,468 361.291667,468 L15.7083333,468 Z M21.6666667,366 C9.69989583,366 0,359.831861 0,352.222222 L0,317.777778 C0,310.168139 9.69989583,304 21.6666667,304 L498.333333,304 C510.300104,304 520,310.168139 520,317.777778 L520,352.222222 C520,359.831861 510.300104,366 498.333333,366 L21.6666667,366 Z M136.835938,64 L136.835937,126 L107.25,126 L107.25,251 L40.75,251 L40.75,126 L-5.68434189e-14,126 L-5.68434189e-14,64 L136.835938,64 Z M212,64 L212,251 L161.648438,251 L161.648438,64 L212,64 Z M378,64 L378,126 L343.25,126 L343.25,251 L281.75,251 L281.75,126 L238,126 L238,64 L378,64 Z M449.047619,189.550781 L520,189.550781 L520,251 L405,251 L405,64 L449.047619,64 L449.047619,189.550781 Z\" />\n    </svg>\n  ),\n  execute: (state, api) => {\n    let modifyText = `### ${state.selectedText}\\n`;\n    if (!state.selectedText) {\n      modifyText = `### `;\n    }\n    api.replaceSelection(modifyText);\n  },\n};\n\nconst title2 = {\n  name: 'title2',\n  keyCommand: 'title2',\n  render: (command, disabled, executeCommand) => {\n    return (\n      <button \n        aria-label=\"Insert title2\"\n        disabled={disabled}\n        onClick={(evn) => {\n          // evn.stopPropagation();\n          executeCommand(command, command.groupName)\n        }}\n      >\n        <svg width=\"12\" height=\"12\" viewBox=\"0 0 520 520\">\n          <path fill=\"currentColor\" d=\"M15.7083333,468 C7.03242448,468 0,462.030833 0,454.666667 L0,421.333333 C0,413.969167 7.03242448,408 15.7083333,408 L361.291667,408 C369.967576,408 377,413.969167 377,421.333333 L377,454.666667 C377,462.030833 369.967576,468 361.291667,468 L15.7083333,468 Z M21.6666667,366 C9.69989583,366 0,359.831861 0,352.222222 L0,317.777778 C0,310.168139 9.69989583,304 21.6666667,304 L498.333333,304 C510.300104,304 520,310.168139 520,317.777778 L520,352.222222 C520,359.831861 510.300104,366 498.333333,366 L21.6666667,366 Z M136.835938,64 L136.835937,126 L107.25,126 L107.25,251 L40.75,251 L40.75,126 L-5.68434189e-14,126 L-5.68434189e-14,64 L136.835938,64 Z M212,64 L212,251 L161.648438,251 L161.648438,64 L212,64 Z M378,64 L378,126 L343.25,126 L343.25,251 L281.75,251 L281.75,126 L238,126 L238,64 L378,64 Z M449.047619,189.550781 L520,189.550781 L520,251 L405,251 L405,64 L449.047619,64 L449.047619,189.550781 Z\" />\n        </svg>\n      </button>\n    )\n  },\n  execute: (state, api) => {\n    let modifyText = `## ${state.selectedText}\\n`;\n    if (!state.selectedText) {\n      modifyText = `## `;\n    }\n    api.replaceSelection(modifyText);\n  },\n}\n\nfunction SubChildren({ close, execute, getState, textApi, dispatch }) {\n  const [value, setValue] = useState('')\n  const insert = () => {\n    console.log('value:::', value)\n    textApi.replaceSelection(value)\n  }\n  return (\n    <div style={{ width: 120, padding: 10 }}>\n      <div>My Custom Toolbar</div>\n      <input type=\"text\" onChange={(e) => setValue(e.target.value)} />\n      <button\n        type=\"button\"\n        onClick={() => {\n          dispatch({ $value: '~~~~~~' })\n          console.log('> execute: >>>>>', getState())\n        }}\n      >\n        State\n      </button>\n      <button type=\"button\" onClick={insert}>Insert</button>\n      <button type=\"button\" onClick={() => close()}>Close</button>\n      <button type=\"button\" onClick={() => execute()}>Execute</button>\n    </div>\n  );\n}\n\nconst subChild = {\n  name: 'update',\n  groupName: 'update',\n  icon: (\n    <svg viewBox=\"0 0 1024 1024\" width=\"12\" height=\"12\">\n      <path fill=\"currentColor\" d=\"M716.8 921.6a51.2 51.2 0 1 1 0 102.4H307.2a51.2 51.2 0 1 1 0-102.4h409.6zM475.8016 382.1568a51.2 51.2 0 0 1 72.3968 0l144.8448 144.8448a51.2 51.2 0 0 1-72.448 72.3968L563.2 541.952V768a51.2 51.2 0 0 1-45.2096 50.8416L512 819.2a51.2 51.2 0 0 1-51.2-51.2v-226.048l-57.3952 57.4464a51.2 51.2 0 0 1-67.584 4.2496l-4.864-4.2496a51.2 51.2 0 0 1 0-72.3968zM512 0c138.6496 0 253.4912 102.144 277.1456 236.288l10.752 0.3072C924.928 242.688 1024 348.0576 1024 476.5696 1024 608.9728 918.8352 716.8 788.48 716.8a51.2 51.2 0 1 1 0-102.4l8.3968-0.256C866.2016 609.6384 921.6 550.0416 921.6 476.5696c0-76.4416-59.904-137.8816-133.12-137.8816h-97.28v-51.2C691.2 184.9856 610.6624 102.4 512 102.4S332.8 184.9856 332.8 287.488v51.2H235.52c-73.216 0-133.12 61.44-133.12 137.8816C102.4 552.96 162.304 614.4 235.52 614.4l5.9904 0.3584A51.2 51.2 0 0 1 235.52 716.8C105.1648 716.8 0 608.9728 0 476.5696c0-132.1984 104.8064-239.872 234.8544-240.2816C258.5088 102.144 373.3504 0 512 0z\" />\n    </svg>\n  ),\n  children: (props) => <SubChildren {...props} />,\n  execute: (state, api)  => {\n    console.log('>>>>>>update>>>>>', state)\n  },\n  buttonProps: { 'aria-label': 'Insert title'}\n}\n\nexport default function App() {\n  const [value, setValue] = React.useState(\"Hello Markdown! `Tab` key uses default behavior\");\n  return (\n    <div className=\"container\">\n      <MDEditor\n        value={value}\n        onChange={setValue}\n        commands={[\n          // Custom Toolbars\n          title3, title2,\n          commands.group([commands.title1, commands.title2, commands.title3, commands.title4, commands.title5, commands.title6], {\n            name: 'title',\n            groupName: 'title',\n            buttonProps: { 'aria-label': 'Insert title'}\n          }),\n          commands.divider,\n          commands.group([], subChild),\n        ]}\n      />\n    </div>\n  );\n}\n```\n\nCustomize the toolbar with `commands` and `extraCommands` props.\n\n```jsx mdx:preview\nimport React from \"react\";\nimport MDEditor, { commands } from '@uiw/react-md-editor';\n\nexport default function App() {\n  const [value, setValue] = React.useState(\"Hello Markdown! `Tab` key uses default behavior\");\n  return (\n    <div className=\"container\">\n      <MDEditor\n        value={value}\n        onChange={setValue}\n        preview=\"edit\"\n        commands={[\n          commands.codeEdit, commands.codePreview\n        ]}\n        extraCommands={[\n          commands.group([commands.title1, commands.title2, commands.title3, commands.title4, commands.title5, commands.title6], {\n            name: 'title',\n            groupName: 'title',\n            buttonProps: { 'aria-label': 'Insert title'}\n          }),\n          commands.divider,\n          commands.group([], {\n            name: 'update',\n            groupName: 'update',\n            icon: (\n              <svg viewBox=\"0 0 1024 1024\" width=\"12\" height=\"12\">\n                <path fill=\"currentColor\" d=\"M716.8 921.6a51.2 51.2 0 1 1 0 102.4H307.2a51.2 51.2 0 1 1 0-102.4h409.6zM475.8016 382.1568a51.2 51.2 0 0 1 72.3968 0l144.8448 144.8448a51.2 51.2 0 0 1-72.448 72.3968L563.2 541.952V768a51.2 51.2 0 0 1-45.2096 50.8416L512 819.2a51.2 51.2 0 0 1-51.2-51.2v-226.048l-57.3952 57.4464a51.2 51.2 0 0 1-67.584 4.2496l-4.864-4.2496a51.2 51.2 0 0 1 0-72.3968zM512 0c138.6496 0 253.4912 102.144 277.1456 236.288l10.752 0.3072C924.928 242.688 1024 348.0576 1024 476.5696 1024 608.9728 918.8352 716.8 788.48 716.8a51.2 51.2 0 1 1 0-102.4l8.3968-0.256C866.2016 609.6384 921.6 550.0416 921.6 476.5696c0-76.4416-59.904-137.8816-133.12-137.8816h-97.28v-51.2C691.2 184.9856 610.6624 102.4 512 102.4S332.8 184.9856 332.8 287.488v51.2H235.52c-73.216 0-133.12 61.44-133.12 137.8816C102.4 552.96 162.304 614.4 235.52 614.4l5.9904 0.3584A51.2 51.2 0 0 1 235.52 716.8C105.1648 716.8 0 608.9728 0 476.5696c0-132.1984 104.8064-239.872 234.8544-240.2816C258.5088 102.144 373.3504 0 512 0z\" />\n              </svg>\n            ),\n            children: ({ close, execute, getState, textApi }) => {\n              return (\n                <div style={{ width: 120, padding: 10 }}>\n                  <div>My Custom Toolbar</div>\n                  <button type=\"button\" onClick={() => console.log('> execute: >>>>>', getState())}>State</button>\n                  <button type=\"button\" onClick={() => close()}>Close</button>\n                  <button type=\"button\" onClick={() => execute()}>Execute</button>\n                </div>\n              );\n            },\n            execute: (state, api)  => {\n              console.log('>>>>>>update>>>>>', state)\n            },\n            buttonProps: { 'aria-label': 'Insert title'}\n          }),\n          commands.divider, commands.fullscreen\n        ]}\n      />\n    </div>\n  );\n}\n```\n\nre-render `toolbar` element.\n\n```jsx mdx:preview\nimport React from \"react\";\nimport MDEditor, { commands } from '@uiw/react-md-editor';\n\nexport default function App() {\n  const [value, setValue] = React.useState(\"Hello Markdown! `Tab` key uses default behavior\");\n  return (\n    <div className=\"container\">\n      <MDEditor\n        value={value}\n        onChange={setValue}\n        preview=\"edit\"\n        components={{\n          toolbar: (command, disabled, executeCommand) => {\n            if (command.keyCommand === 'code') {\n              return (\n                <button \n                  aria-label=\"Insert code\"\n                  disabled={disabled}\n                  onClick={(evn) => {\n                    evn.stopPropagation();\n                    executeCommand(command, command.groupName)\n                  }}\n                >\n                  Code\n                </button>\n              )\n            }\n          }\n        }}\n      />\n    </div>\n  );\n}\n```\n\nCustom Preview Command Tool\n\n[![Open in CodeSandbox](https://img.shields.io/badge/Open%20in-CodeSandbox-blue?logo=codesandbox)](https://codesandbox.io/embed/react-md-editor-custom-toolbars-https-github-com-uiwjs-react-md-editor-issues-433-9mwuob?fontsize=14&hidenavigation=1&theme=dark)\n\n```jsx mdx:preview\nimport React, { useContext } from \"react\";\nimport MDEditor, { commands, EditorContext } from \"@uiw/react-md-editor\";\n\nconst Button = () => {\n  const { preview, dispatch } = useContext(EditorContext);\n  const click = () => {\n    dispatch({\n      preview: preview === \"edit\" ? \"preview\" : \"edit\"\n    });\n  };\n  if (preview === \"edit\") {\n    return (\n      <svg width=\"12\" height=\"12\" viewBox=\"0 0 520 520\" onClick={click}>\n        <polygon\n          fill=\"currentColor\"\n          points=\"0 71.293 0 122 319 122 319 397 0 397 0 449.707 372 449.413 372 71.293\"\n        />\n        <polygon\n          fill=\"currentColor\"\n          points=\"429 71.293 520 71.293 520 122 481 123 481 396 520 396 520 449.707 429 449.413\"\n        />\n      </svg>\n    );\n  }\n  return (\n    <svg width=\"12\" height=\"12\" viewBox=\"0 0 520 520\" onClick={click}>\n      <polygon\n        fill=\"currentColor\"\n        points=\"0 71.293 0 122 38.023 123 38.023 398 0 397 0 449.707 91.023 450.413 91.023 72.293\"\n      />\n      <polygon\n        fill=\"currentColor\"\n        points=\"148.023 72.293 520 71.293 520 122 200.023 124 200.023 397 520 396 520 449.707 148.023 450.413\"\n      />\n    </svg>\n  );\n};\n\nconst codePreview = {\n  name: \"preview\",\n  keyCommand: \"preview\",\n  value: \"preview\",\n  icon: <Button />\n};\n\nconst Disable = () => {\n  const { preview, dispatch } = useContext(EditorContext);\n  return (\n    <button disabled={preview === \"preview\"}>\n      <svg viewBox=\"0 0 16 16\" width=\"12px\" height=\"12px\">\n        <path\n          d=\"M8 0C3.6 0 0 3.6 0 8s3.6 8 8 8 8-3.6 8-8-3.6-8-8-8Zm.9 13H7v-1.8h1.9V13Zm-.1-3.6v.5H7.1v-.6c.2-2.1 2-1.9 1.9-3.2.1-.7-.3-1.1-1-1.1-.8 0-1.2.7-1.2 1.6H5c0-1.7 1.2-3 2.9-3 2.3 0 3 1.4 3 2.3.1 2.3-1.9 2-2.1 3.5Z\"\n          fill=\"currentColor\"\n        />\n      </svg>\n    </button>\n  )\n}\n\nconst customButton = {\n  name: \"disable\",\n  keyCommand: \"disable\",\n  value: \"disable\",\n  icon: <Disable />\n}\n\nexport default function App() {\n  const [value, setValue] = React.useState(\"**Hello world!!!**\");\n  return (\n    <div className=\"container\">\n      <div>The system automatically sets the theme</div>\n      <MDEditor\n        value={value}\n        preview=\"edit\"\n        extraCommands={[codePreview, customButton, commands.fullscreen]}\n        onChange={(val) => setValue(val)}\n      />\n    </div>\n  );\n}\n```\n\nAdd Help Command Tool\n\n[![Open in CodeSandbox](https://img.shields.io/badge/Open%20in-CodeSandbox-blue?logo=codesandbox)](https://codesandbox.io/embed/markdown-editor-for-react-https-github-com-uiwjs-react-md-editor-issues-530-add-help-command-tool-fpnj22?fontsize=14&hidenavigation=1&theme=dark)\n\n```jsx mdx:preview\nimport React, { useContext } from \"react\";\nimport MDEditor, { commands } from \"@uiw/react-md-editor\";\n\nconst help = {\n  name: \"help\",\n  keyCommand: \"help\",\n  buttonProps: { \"aria-label\": \"Insert help\" },\n  icon: (\n    <svg viewBox=\"0 0 16 16\" width=\"12px\" height=\"12px\">\n      <path\n        d=\"M8 0C3.6 0 0 3.6 0 8s3.6 8 8 8 8-3.6 8-8-3.6-8-8-8Zm.9 13H7v-1.8h1.9V13Zm-.1-3.6v.5H7.1v-.6c.2-2.1 2-1.9 1.9-3.2.1-.7-.3-1.1-1-1.1-.8 0-1.2.7-1.2 1.6H5c0-1.7 1.2-3 2.9-3 2.3 0 3 1.4 3 2.3.1 2.3-1.9 2-2.1 3.5Z\"\n        fill=\"currentColor\"\n      />\n    </svg>\n  ),\n  execute: (state, api) => {\n    window.open(\"https://www.markdownguide.org/basic-syntax/\", \"_blank\");\n  }\n};\n\nexport default function App() {\n  const [value, setValue] = React.useState(\"**Hello world!!!**\");\n  return (\n    <MDEditor\n      value={value}\n      preview=\"edit\"\n      commands={[...commands.getCommands(), help]}\n      onChange={(val) => setValue(val)}\n    />\n  );\n}\n```\n\n### Editor Font Size\n\n[![Open in CodeSandbox](https://img.shields.io/badge/Open%20in-CodeSandbox-blue?logo=codesandbox)](https://codesandbox.io/embed/markdown-editor-for-react-uiwjs-react-md-editor-issues-425-2epmgh?fontsize=14&hidenavigation=1&theme=dark)\n[![#425](https://img.shields.io/github/issues/detail/state/uiwjs/react-md-editor/425)](https://github.com/uiwjs/react-md-editor/issues/425#issuecomment-1209514536)\n\n```css\nbody .w-md-editor-text-pre > code,\nbody .w-md-editor-text-input {\n  font-size: 23px !important;\n  line-height: 24px !important;\n}\n```\n\n### Editor height adapts to text\n\nThe initial height can be adjusted through `minHeight={100}`. Dragbar will automatically expire. You can hide the drag button through `visibleDragbar={false}`\n\n```jsx mdx:preview\nimport React from \"react\";\nimport MDEditor from '@uiw/react-md-editor';\n\nexport default function App() {\n  const [value, setValue] = React.useState(\"**Hello world!!!**\");\n  return (\n    <div className=\"container\">\n      <MDEditor\n        value={value}\n        height=\"100%\"\n        // minHeight={50}\n        visibleDragbar={false}\n        onChange={setValue}\n      />\n    </div>\n  );\n}\n```\n\n### Preview Markdown\n\n[![Open in CodeSandbox](https://img.shields.io/badge/Open%20in-CodeSandbox-blue?logo=codesandbox)](https://codesandbox.io/embed/react-md-editor-preview-markdown-vrucl?fontsize=14&hidenavigation=1&theme=dark)\n\n```jsx mdx:preview\nimport React from \"react\";\nimport MDEditor from '@uiw/react-md-editor';\n\nexport default function App() {\n  return (\n    <div className=\"container\">\n      <MDEditor.Markdown source=\"Hello Markdown!\" />\n    </div>\n  );\n}\n```\n\n### Support Custom KaTeX Preview\n\nKaTeX is a fast, easy-to-use JavaScript library for TeX math rendering on the web, We perform math rendering through [`KaTeX`](https://github.com/KaTeX/KaTeX).\n\nThe following example is preview in [CodeSandbox](https://codesandbox.io/s/markdown-editor-katex-for-react-7v3vl).\n\n[![Open in CodeSandbox](https://img.shields.io/badge/Open%20in-CodeSandbox-blue?logo=codesandbox)](https://codesandbox.io/embed/headless-frog-em8yg?fontsize=14&hidenavigation=1&theme=dark)\n\n> ‚ö†Ô∏è Upgrade v2 to v3 [d025430](https://github.com/uiwjs/react-md-editor/blob/7b9f11ab689a7ea288df3e82c26f4f0e9a53d271/website/ExmapleKaTeX.tsx#L1-L63)\n\n```bash\nnpm install katex\n```\n\n```jsx mdx:preview\nimport React from \"react\";\nimport MDEditor from '@uiw/react-md-editor';\nimport { getCodeString } from 'rehype-rewrite';\nimport katex from 'katex';\nimport 'katex/dist/katex.css';\n\nconst mdKaTeX = `This is to display the \n\\`\\$\\$\\c = \\\\pm\\\\sqrt{a^2 + b^2}\\$\\$\\`\n in one line\n\n\\`\\`\\`KaTeX\nc = \\\\pm\\\\sqrt{a^2 + b^2}\n\\`\\`\\`\n`;\n\nexport default function App() {\n  const [value, setValue] = React.useState(mdKaTeX);\n  return (\n    <MDEditor\n      value={value}\n      onChange={(val) => setValue(val)}\n      previewOptions={{\n        components: {\n          code: ({ children = [], className, ...props }) => {\n            if (typeof children === 'string' && /^\\$\\$(.*)\\$\\$/.test(children)) {\n              const html = katex.renderToString(children.replace(/^\\$\\$(.*)\\$\\$/, '$1'), {\n                throwOnError: false,\n              });\n              return <code dangerouslySetInnerHTML={{ __html: html }} style={{ background: 'transparent' }} />;\n            }\n            const code = props.node && props.node.children ? getCodeString(props.node.children) : children;\n            if (\n              typeof code === 'string' &&\n              typeof className === 'string' &&\n              /^language-katex/.test(className.toLocaleLowerCase())\n            ) {\n              const html = katex.renderToString(code, {\n                throwOnError: false,\n              });\n              return <code style={{ fontSize: '150%' }} dangerouslySetInnerHTML={{ __html: html }} />;\n            }\n            return <code className={String(className)}>{children}</code>;\n          },\n        },\n      }}\n    />\n  );\n}\n```\n\n### Markdown text to Image\n\n[![Open in CodeSandbox](https://img.shields.io/badge/Open%20in-CodeSandbox-blue?logo=codesandbox)](https://codesandbox.io/embed/react-md-editor-text-to-images-ijqmx?fontsize=14&hidenavigation=1&theme=dark)\n\n```tsx mdx:preview\nimport React, { useState } from \"react\";\nimport MDEditor, { commands, ICommand, TextState, TextAreaTextApi } from \"@uiw/react-md-editor\";\nimport domToImage from \"dom-to-image\";\n\nconst textToImage: ICommand = {\n  name: \"Text To Image\",\n  keyCommand: \"text2image\",\n  buttonProps: { \"aria-label\": \"Insert title3\" },\n  icon: (\n    <svg width=\"12\" height=\"12\" viewBox=\"0 0 20 20\">\n      <path fill=\"currentColor\" d=\"M15 9c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm4-7H1c-.55 0-1 .45-1 1v14c0 .55.45 1 1 1h18c.55 0 1-.45 1-1V3c0-.55-.45-1-1-1zm-1 13l-6-5-2 2-4-5-4 8V4h16v11z\" ></path>\n    </svg>\n  ),\n  execute: (state: TextState, api: TextAreaTextApi) => {\n    const dom = document.getElementsByClassName(\"gooooooooo\")[0];\n    if (dom) {\n      domToImage.toJpeg(dom, {}).then((dataUrl) => {\n        const link = document.createElement(\"a\");\n        link.download = \"image.jpg\";\n        link.href = dataUrl;\n        link.click();\n      });\n    }\n  }\n};\n\nexport default function App() {\n  const [value, setValue] = useState('**Hello world!!!**');\n  console.log('value::', value)\n  return (\n    <div className=\"container\">\n      <MDEditor\n        className=\"gooooooooo\"\n        onChange={(newValue = \"\") => setValue(newValue)}\n        value={value}\n        commands={[\n          textToImage,\n          commands.divider\n        ]}\n      />\n    </div>\n  );\n}\n```\n\n### Support Custom Mermaid Preview\n\nUsing [mermaid](https://github.com/mermaid-js/mermaid) to generation of diagram and flowchart from text in a similar manner as markdown\n\n[![Open in CodeSandbox](https://img.shields.io/badge/Open%20in-CodeSandbox-blue?logo=codesandbox)](https://codesandbox.io/embed/recursing-water-08i59s?fontsize=14&hidenavigation=1&theme=dark)\n\n```bash\nnpm install mermaid\n```\n\n```jsx mdx:preview\nimport React, { useState, useRef, useEffect, Fragment, useCallback } from \"react\";\nimport MDEditor from \"@uiw/react-md-editor\";\nimport { getCodeString } from 'rehype-rewrite';\nimport mermaid from \"mermaid\";\n\nconst mdMermaid = `The following are some examples of the diagrams, charts and graphs that can be made using Mermaid and the Markdown-inspired text specific to it. \n\n\\`\\`\\`mermaid\ngraph TD\nA[Hard] -->|Text| B(Round)\nB --> C{Decision}\nC -->|One| D[Result 1]\nC -->|Two| E[Result 2]\n\\`\\`\\`\n\n\\`\\`\\`mermaid\nsequenceDiagram\nAlice->>John: Hello John, how are you?\nloop Healthcheck\n    John->>John: Fight against hypochondria\nend\nNote right of John: Rational thoughts!\nJohn-->>Alice: Great!\nJohn->>Bob: How about you?\nBob-->>John: Jolly good!\n\\`\\`\\`\n`;\n\nconst randomid = () => parseInt(String(Math.random() * 1e15), 10).toString(36);\nconst Code = ({ inline, children = [], className, ...props }) => {\n  const demoid = useRef(`dome${randomid()}`);\n  const [container, setContainer] = useState(null);\n  const isMermaid =\n    className && /^language-mermaid/.test(className.toLocaleLowerCase());\n  const code = children\n    ? getCodeString(props.node.children)\n    : children[0] || \"\";\n\n  useEffect(() => {\n    if (container && isMermaid && demoid.current && code) {\n      mermaid\n        .render(demoid.current, code)\n        .then(({ svg, bindFunctions }) => {\n          container.innerHTML = svg;\n          if (bindFunctions) {\n            bindFunctions(container);\n          }\n        })\n        .catch((error) => {\n          console.log(\"error:\", error);\n        });\n    }\n  }, [container, isMermaid, code, demoid]);\n\n  const refElement = useCallback((node) => {\n    if (node !== null) {\n      setContainer(node);\n    }\n  }, []);\n\n  if (isMermaid) {\n    return (\n      <Fragment>\n        <code id={demoid.current} style={{ display: \"none\" }} />\n        <code className={className} ref={refElement} data-name=\"mermaid\" />\n      </Fragment>\n    );\n  }\n  return <code className={className}>{children}</code>;\n};\n\nexport default function App() {\n  const [value, setValue] = useState(mdMermaid);\n  return (\n    <MDEditor\n      onChange={(newValue = \"\") => setValue(newValue)}\n      textareaProps={{\n        placeholder: \"Please enter Markdown text\"\n      }}\n      height={500}\n      value={value}\n      previewOptions={{\n        components: {\n          code: Code\n        }\n      }}\n    />\n  );\n}\n```\n\n### Support Nextjs\n\nUse examples in [nextjs](https://nextjs.org/). [`#52`](https://github.com/uiwjs/react-md-editor/issues/52#issuecomment-848969341) [`#224`](https://github.com/uiwjs/react-md-editor/issues/224#issuecomment-901112079)\n\n[![Open in CodeSandbox](https://img.shields.io/badge/Open%20in-CodeSandbox-blue?logo=codesandbox)](https://codesandbox.io/embed/nextjs-example-react-md-editor-https-github-com-uiwjs-react-md-editor-issues-516-1z56px?fontsize=14&hidenavigation=1&theme=dark)\n[![Open in CodeSandbox](https://img.shields.io/badge/Open%20in-CodeSandbox-blue?logo=codesandbox)](https://codesandbox.io/embed/nextjs-example-react-md-editor-qjhn7?fontsize=14&hidenavigation=1&theme=dark) [![Open in StackBlitz](https://img.shields.io/badge/Open%20In-StackBlitz-green)](https://stackblitz.com/edit/nextjs-react-md-editor?embed=1&file=pages/index.js&hideExplorer=1&hideNavigation=1&theme=dark)\n[![#52](https://img.shields.io/github/issues/detail/state/uiwjs/react-md-editor/52)](https://github.com/uiwjs/react-md-editor/issues/52#issuecomment-848969341)\n[![#224](https://img.shields.io/github/issues/detail/state/uiwjs/react-md-editor/224)](https://github.com/uiwjs/react-md-editor/issues/224#issuecomment-901112079)\n\n```bash\nnpm install next-remove-imports\nnpm install @uiw/react-md-editor@v3.6.0\n```\n\n```js\n// next.config.js\nconst removeImports = require('next-remove-imports')();\nmodule.exports = removeImports({});\n```\n\n```jsx\nimport \"@uiw/react-md-editor/markdown-editor.css\";\nimport \"@uiw/react-markdown-preview/markdown.css\";\nimport dynamic from \"next/dynamic\";\nimport { useState } from \"react\";\n\nimport * as commands from \"@uiw/react-md-editor/commands\"\n\nconst MDEditor = dynamic(\n  () => import(\"@uiw/react-md-editor\"),\n  { ssr: false }\n);\n\nfunction HomePage() {\n  const [value, setValue] = useState(\"**Hello world!!!**\");\n  return (\n    <div>\n      <MDEditor value={value} onChange={setValue} />\n    </div>\n  );\n}\n\nexport default HomePage;\n```\n\n### Support dark-mode/night-mode\n\nBy default, the [`dark-mode`](https://github.com/jaywcjlove/dark-mode/) is automatically switched according to the system. If you need to switch manually, just set the `data-color-mode=\"dark\"` parameter for body. \n\n```html\n<html data-color-mode=\"dark\">\n```\n\n```js\ndocument.documentElement.setAttribute('data-color-mode', 'dark')\ndocument.documentElement.setAttribute('data-color-mode', 'light')\n```\n\nInherit custom color variables by adding [`.wmde-markdown-var`](https://github.com/uiwjs/react-markdown-preview/blob/a53be1e93fb1c2327649c4a6b084adb80679affa/src/styles/markdown.less#L1-L193) selector. Setting theme styles with `data-color-mode=\"light\"`.\n\n```html\n<div data-color-mode=\"light\">\n  <div className=\"wmde-markdown-var\"> </div>\n  <MDEditor source=\"Hello World!\" />\n</div>\n```\n\n### Props\n\n- `value: string`: The Markdown value.\n- `onChange?: (value?: string, event?: React.ChangeEvent<HTMLTextAreaElement>, state?: ContextStore)`: Event handler for the `onChange` event.\n- `onHeightChange?: ((value?: CSSProperties['height'], oldValue?: CSSProperties['height'], state?: ContextStore)`: editor height change listener.\n- `onStatistics?: (data: Statistics) => void;` Some data on the statistics editor.\n- `commands?: ICommand[]`: An array of [`ICommand`](https://github.com/uiwjs/react-md-editor/blob/d02543050c9abd8f7c72ae02b6421ac2e6ae421a/src/commands/index.ts#L39-L57), which, each one, contain a [`commands`](https://github.com/uiwjs/react-md-editor/blob/d02543050c9abd8f7c72ae02b6421ac2e6ae421a/src/commands/index.ts#L155-L180) property. If no commands are specified, the default will be used. Commands are explained in more details below.\n- `commandsFilter?: (command: ICommand, isExtra: boolean) => false | ICommand`: Filter or modify your commands.\n- `extraCommands?: ICommand[]`: Displayed on the right side of the toolbar.\n- `autoFocus?: true`: Can be used to make `Markdown Editor` focus itself on initialization.\n- `previewOptions?: ReactMarkdown.ReactMarkdownProps`: This is reset [@uiw/react-markdown-preview](https://github.com/uiwjs/react-markdown-preview/tree/0036dd51a25c00d5be6dc83aa978905c64750038?tab=readme-ov-file#options-props) settings.\n- `textareaProps?: TextareaHTMLAttributes`: Set the `textarea` related props.\n- ~~`renderTextarea?: (props, opts) => JSX.Element;`~~: `@deprecated` Please use ~~`renderTextarea`~~ -> `components`. Use div to replace TextArea or re-render TextArea. [#193](https://github.com/uiwjs/react-md-editor/issues/193)\n- `components`: re-render textarea/toolbar element. [#419](https://github.com/uiwjs/react-md-editor/issues/419)\n    - `textarea` Use div to replace TextArea or re-render TextArea\n    - `toolbar` Override the default command element. _`toolbar`_ < _`command[].render`_\n    - `preview` Custom markdown preview. [#429](https://github.com/uiwjs/react-md-editor/issues/429)\n- `height?: number=200`: The height of the editor. Ô∏è‚ö†Ô∏è `Dragbar` is invalid when **`height`** parameter percentage.\n- `visibleDragbar?: boolean=true`: Show drag and drop tool. Set the height of the editor.\n- `highlightEnable?: boolean=true`: Disable editing area code highlighting. The value is `false`, which increases the editing speed.\n- `fullscreen?: boolean=false`: Show markdown preview.\n- `overflow?: boolean=true`: Disable `fullscreen` setting body styles\n- `preview?: 'live' | 'edit' | 'preview'`: Default value `live`, Show markdown preview.\n- `maxHeight?: number=1200`: Maximum drag height. The `visibleDragbar=true` value is valid.\n- `minHeights?: number=100`: Minimum drag height. The `visibleDragbar=true` value is valid.\n- `tabSize?: number=2`: The number of characters to insert when pressing tab key. Default `2` spaces.\n- `defaultTabEnable?: boolean=false`: If `false`, the `tab` key inserts a tab character into the textarea. If `true`, the `tab` key executes default behavior e.g. focus shifts to next element. \n- `hideToolbar?: boolean=false`: Option to hide the tool bar.\n- `enableScroll?: boolean=true`: Whether to enable scrolling.\n\n### Development\n\n1. Install dependencies\n\n```bash\n$ npm install       # Installation dependencies\n$ npm run build     # Compile all package\n```\n\n2. Development `@uiw/react-md-editor` package:\n\n```bash\n$ cd core\n# listen to the component compile and output the .js file\n# listen for compilation output type .d.ts file\n$ npm run watch # Monitor the compiled package `@uiw/react-md-editor`\n```\n\n3. Launch documentation site\n\n```bash\nnpm run start\n```\n\n### Related\n\n- [@uiw/react-textarea-code-editor](https://github.com/uiwjs/react-textarea-code-editor): A simple code editor with syntax highlighting.\n- [@uiw/react-md-editor](https://github.com/uiwjs/react-md-editor): A simple markdown editor with preview, implemented with React.js and TypeScript.\n- [@uiw/react-codemirror](https://github.com/uiwjs/react-codemirror): CodeMirror component for React. @codemirror\n- [@uiw/react-monacoeditor](https://github.com/jaywcjlove/react-monacoeditor): Monaco Editor component for React.\n- [@uiw/react-markdown-editor](https://github.com/uiwjs/react-markdown-editor): A markdown editor with preview, implemented with React.js and TypeScript.\n- [@uiw/react-markdown-preview](https://github.com/uiwjs/react-markdown-preview): React component preview markdown text in web browser. \n\n## Contributors\n\nAs always, thanks to our amazing contributors!\n\n  <!--AUTO_GENERATED_PLEASE_DONT_DELETE_IT--><a href=\"https://github.com/jaywcjlove\" title=\"Â∞èÂºüË∞ÉË∞É\">\n  <img src=\"https://avatars.githubusercontent.com/u/1680273?v=4\" width=\"42;\" alt=\"Â∞èÂºüË∞ÉË∞É\"/>\n</a>\n<a href=\"https://github.com/renovate-bot\" title=\"Mend Renovate\">\n  <img src=\"https://avatars.githubusercontent.com/u/25180681?v=4\" width=\"42;\" alt=\"Mend Renovate\"/>\n</a>\n<a href=\"https://github.com/stevemk14ebr\" title=\"Stephen Eckels\">\n  <img src=\"https://avatars.githubusercontent.com/u/6619205?v=4\" width=\"42;\" alt=\"Stephen Eckels\"/>\n</a>\n<a href=\"https://github.com/avalero\" title=\"Alberto Valero G√≥mez\">\n  <img src=\"https://avatars.githubusercontent.com/u/1442682?v=4\" width=\"42;\" alt=\"Alberto Valero G√≥mez\"/>\n</a>\n<a href=\"https://github.com/alphacoma18\" title=\"Alpha Romer Coma\">\n  <img src=\"https://avatars.githubusercontent.com/u/108984668?v=4\" width=\"42;\" alt=\"Alpha Romer Coma\"/>\n</a>\n<a href=\"https://github.com/RARgames\" title=\"RAR\">\n  <img src=\"https://avatars.githubusercontent.com/u/13639766?v=4\" width=\"42;\" alt=\"RAR\"/>\n</a>\n<a href=\"https://github.com/Exmirai\" title=\"UniqueUlysees\">\n  <img src=\"https://avatars.githubusercontent.com/u/6436703?v=4\" width=\"42;\" alt=\"UniqueUlysees\"/>\n</a>\n<a href=\"https://github.com/nuragic\" title=\"Andrea Puddu\">\n  <img src=\"https://avatars.githubusercontent.com/u/1586378?v=4\" width=\"42;\" alt=\"Andrea Puddu\"/>\n</a>\n<a href=\"https://github.com/bramus\" title=\"Bramus\">\n  <img src=\"https://avatars.githubusercontent.com/u/213073?v=4\" width=\"42;\" alt=\"Bramus\"/>\n</a>\n<a href=\"https://github.com/CarleneCannon-Conner\" title=\"Carlene Cannon-Conner\">\n  <img src=\"https://avatars.githubusercontent.com/u/1942791?v=4\" width=\"42;\" alt=\"Carlene Cannon-Conner\"/>\n</a>\n<a href=\"https://github.com/MercierCorentin\" title=\"Corentin Mercier\">\n  <img src=\"https://avatars.githubusercontent.com/u/46066895?v=4\" width=\"42;\" alt=\"Corentin Mercier\"/>\n</a>\n<a href=\"https://github.com/dmitriyyan\" title=\"Dmitrii Ianushkevich\">\n  <img src=\"https://avatars.githubusercontent.com/u/89025862?v=4\" width=\"42;\" alt=\"Dmitrii Ianushkevich\"/>\n</a>\n<a href=\"https://github.com/jnishiyama\" title=\"James Finucane\">\n  <img src=\"https://avatars.githubusercontent.com/u/2048195?v=4\" width=\"42;\" alt=\"James Finucane\"/>\n</a>\n<a href=\"https://github.com/allforabit\" title=\"Kevin Nolan\">\n  <img src=\"https://avatars.githubusercontent.com/u/537189?v=4\" width=\"42;\" alt=\"Kevin Nolan\"/>\n</a>\n<a href=\"https://github.com/kseikyo\" title=\"Lucas Sierota\">\n  <img src=\"https://avatars.githubusercontent.com/u/29212286?v=4\" width=\"42;\" alt=\"Lucas Sierota\"/>\n</a>\n<a href=\"https://github.com/michaelkramer\" title=\"Michael Kramer\">\n  <img src=\"https://avatars.githubusercontent.com/u/6052223?v=4\" width=\"42;\" alt=\"Michael Kramer\"/>\n</a>\n<a href=\"https://github.com/peterj\" title=\"Peter Jausovec\">\n  <img src=\"https://avatars.githubusercontent.com/u/11080940?v=4\" width=\"42;\" alt=\"Peter Jausovec\"/>\n</a>\n<a href=\"https://github.com/phillipb\" title=\"Phillip Burch\">\n  <img src=\"https://avatars.githubusercontent.com/u/1482089?v=4\" width=\"42;\" alt=\"Phillip Burch\"/>\n</a>\n<a href=\"https://github.com/psycho-baller\" title=\"Rami Maalouf\">\n  <img src=\"https://avatars.githubusercontent.com/u/81759594?v=4\" width=\"42;\" alt=\"Rami Maalouf\"/>\n</a>\n<a href=\"https://github.com/toresbe\" title=\"Tore Sinding Bekkedal\">\n  <img src=\"https://avatars.githubusercontent.com/u/1761606?v=4\" width=\"42;\" alt=\"Tore Sinding Bekkedal\"/>\n</a>\n<a href=\"https://github.com/valenfv\" title=\"Valentin\">\n  <img src=\"https://avatars.githubusercontent.com/u/34139820?v=4\" width=\"42;\" alt=\"Valentin\"/>\n</a>\n<a href=\"https://github.com/jmtes\" title=\"juno tesoro\">\n  <img src=\"https://avatars.githubusercontent.com/u/38450133?v=4\" width=\"42;\" alt=\"juno tesoro\"/>\n</a>\n<a href=\"https://github.com/juspky\" title=\"juspky\">\n  <img src=\"https://avatars.githubusercontent.com/u/11074890?v=4\" width=\"42;\" alt=\"juspky\"/>\n</a>\n<a href=\"https://github.com/ryicoh\" title=\"ryicoh\">\n  <img src=\"https://avatars.githubusercontent.com/u/37844673?v=4\" width=\"42;\" alt=\"ryicoh\"/>\n</a>\n<a href=\"https://github.com/wj0990\" title=\"wangjie\">\n  <img src=\"https://avatars.githubusercontent.com/u/8792016?v=4\" width=\"42;\" alt=\"wangjie\"/>\n</a><!--AUTO_GENERATED_PLEASE_DONT_DELETE_IT-END-->\n\nMade with [contributors](https://github.com/jaywcjlove/github-action-contributors).\n\n### License\n\nLicensed under the MIT License.\n",
      "description": "Use the maxLength prop to set a character limit on an input field in React, e.g. <input maxLength={5} /> . The maxLength attribute defines the maximum number of characters the user can enter into an input field or a textarea element",
      "author": "ibrahim ahmed",
      "cover": "",
      "tags": [
        "react",
        "redux"
      ],
      "views": "35444",
      "id": "b0be"
    },
    {
      "id": "b4c5",
      "views": "1435",
      "date": "Sat Jan 20 2024 01:00:10 GMT+0200 (Eastern European Standard Time)",
      "title": "my name is hahahahaha",
      "content": "---\noutput: \n  pdf_document:\n    citation_package: natbib\n    keep_tex: true\n    fig_caption: true\n    latex_engine: pdflatex\n    template: ~/Dropbox/miscelanea/svm-r-markdown-templates/svm-latex-ms.tex\ntitle: \"A Pandoc Markdown Article Starter and Template\"\nthanks: \"Replication files are available on the author's Github account (http://github.com/svmiller). **Current version**: `r format(Sys.time(), '%B %d, %Y')`; **Corresponding author**: svmille@clemson.edu.\"\nauthor:\n- name: Steven V. Miller\n  affiliation: Clemson University\nabstract: \"This document provides an introduction to R Markdown, argues for its benefits, and presents a sample manuscript template intended for an academic audience. I include basic syntax to R Markdown and a minimal working example of how the analysis itself can be conducted within R with the `knitr` package.\"\nkeywords: \"pandoc, r markdown, knitr\"\ndate: \"`r format(Sys.time(), '%B %d, %Y')`\"\ngeometry: margin=1in\nfontfamily: mathpazo\nfontsize: 11pt\n# spacing: double\nbibliography: ~/Dropbox/master.bib\nbiblio-style: apsr\nendnote: no\n---\n\n# Introduction\n\nAcademic workflow, certainly in political science, is at a crossroads. The *American Journal of Political Science* (*AJPS*) announced a (my words) [\"show your work\" initiative](http://ajps.org/2015/03/26/the-ajps-replication-policy-innovations-and-revisions/) in which authors who are tentatively accepted for publication at the journal must hand over the raw code and data that produced the results shown in the manuscript. The editorial team at *AJPS* then reproduces the code from the manuscript. Pending successful replication, the manuscript moves toward publication. The *AJPS* might be at the fore of this movement, and it could be the most aggressive among political science journals, but other journals in our field have signed the joint [Data Access & Research Transparency](http://www.dartstatement.org/) (DART) initiative. This, at a bare minimum, requires uploading code from quantitatively-oriented published articles to in-house directories hosted by the journal or to services like [Dataverse](http://dataverse.org/). \n\nThere are workflow implications to the Lacour controversy as well. Political science, for the foreseeable future, will struggle with the extent of [the data fraud perpetrated by Michael Lacour](http://stanford.edu/~dbroock/broockman_kalla_aronow_lg_irregularities.pdf) in an article co-authored with Donald P. Green in *Science*, the general scientific journal of record in the United States. A failure to reproduce LaCour's results with different samples uncovered a comprehensive effort by LaCour to \"fake\" data that provided results to what we felt or believed to be true [(i.e. \"truthiness\")](http://chronicle.com/article/LAffaire-LaCour/230905/). However, [fake data can have real consequences](http://kieranhealy.org/blog/archives/2015/05/20/fake-science-real-consequences/) for both the researcher and those who want to learn from it and use it for various purposes. Even research done honestly may suffer the same fate if researchers are not diligent in their workflow.\n\nThese recent events underscore the DART push and cast a shadow over our workflow. However, good workflow has always been an issue in our discipline. Cloud storage services like [Dropbox](http://www.dropbox.com) are still relatively new among political scientists. Without cloud storage, previous workflow left open the possibility that work between a home computer and an office computer was lost as a function of a corrupted thumb drive, an overheated power supply, or, among other things, the wave of viruses that [would particularly affect Microsoft users every summer](http://money.cnn.com/2003/11/05/technology/microsoftbounty/). Social sciences, [unlike engineering](http://kieranhealy.org/blog/archives/2014/01/23/plain-text/), have traditionally relied on software like Microsoft Word for manuscript preparation though any word processor reduces workflow to a series of clicks and strokes on a keyboard. This is [a terrible way to track changes](http://www.nytimes.com/2013/04/19/opinion/krugman-the-excel-depression.html) or maintain version control. The addition of collaborators only compounds all the aforementioned issues. The proverbial left hand may not know what the right hand is doing.\n\nI think there is reason for optimism. We only struggle with it now because we have tools like [R Markdown](http://rmarkdown.rstudio.com/) and [Pandoc](http://pandoc.org/), more generally, that make significant strides in workflow. LaTeX resolved earlier issues of corrupted binary files by reducing documents to raw markup that was little more than raw text and revisions that could be easily kept as [\"commented\" text](http://tex.stackexchange.com/questions/11177/how-to-write-hidden-notes-in-a-latex-file). However, for all its benefits (including pretty PDFs), [LaTeX is *ugly* code](http://www-rohan.sdsu.edu/~aty/bibliog/latex/gripe.html) and does not provide means of seamlessly working with the actual data analysis itself. R Markdown both eliminates markup and allows the author and her collaborators to write and reproduce the manuscript in one fell swoop.\n\n# Getting Started with YAML\n\nThe lion's share of a R Markdown document will be raw text, though the front matter may be the most important part of the document. R Markdown uses [YAML](http://www.yaml.org/) for its metadata and the fields differ from [what an author would use for a Beamer presentation](http://svmiller.com/blog/2015/02/moving-from-beamer-to-r-markdown/). I provide a sample YAML metadata largely taken from this exact document and explain it below.\n\n```{r eval=FALSE}\n---\noutput: \n  pdf_document:\n    citation_package: natbib\n    keep_tex: true\n    fig_caption: true\n    latex_engine: pdflatex\n    template: ~/Dropbox/miscelanea/svm-r-markdown-templates/svm-latex-ms.tex\ntitle: \"A Pandoc Markdown Article Starter and Template\"\nthanks: \"Replication files are available on the author's Github account...\"\nauthor:\n- name: Steven V. Miller\n  affiliation: Clemson University\n- name: Mary Margaret Albright\n  affiliation: Pendelton State University\n- name: Rembrandt Q. Einstein\n  affiliation: Springfield University\nabstract: \"This document provides an introduction to R Markdown, argues for its...\"\nkeywords: \"pandoc, r markdown, knitr\"\ndate: \"`r format(Sys.time(), '%B %d, %Y')`\"\ngeometry: margin=1in\nfontfamily: mathpazo\nfontsize: 11pt\n# spacing: double\nbibliography: ~/Dropbox/master.bib\nbiblio-style: apsr\n---\n```\n\n`output:` will tell R Markdown we want a PDF document rendered with LaTeX. Since we are adding a fair bit of custom options to this call, we specify `pdf_document:` on the next line (with, importantly, a two-space indent). We specify additional output-level options underneath it, each are indented with four spaces. `citation_package: natbib` tells R Markdown to use `natbib` to handle bibliographic citations.[^natbib] Thereafter, the next line (`keep_tex: true`) tells R Markdown to render a raw `.tex` file along with the PDF document. This is useful for both debugging and the publication stage, when the editorial team will ask for the raw `.tex` so that they could render it and later provide page proofs. The next line `fig_caption: true` tells R Markdown to make sure that whatever images are included in the document are treated as figures in which our caption in brackets in a Markdown call is treated as the caption in the figure. The next line (`latex_engine: pdflatex`) tells R Markdown to use pdflatex and not some other option like `lualatex`. For my template, I'm pretty sure this is mandatory.[^pdflatex]\n\n[^natbib]: R Markdown can use Pandoc's native bibliography management system or even `biblatex`, but I've found that it chokes with some of the more advanced stuff I've done with my .bib file over the years. For example, I've been diligent about special characters (e.g. umlauts and acute accents) in author names in my .bib file, but Pandoc's native citation system will choke on these characters in a .bib file. I effectively need `natbib` for my own projects.\n[^pdflatex]: The main reason I still use `pdflatex` (and most readers probably do as well) is because of LaTeX fonts. [Unlike others](http://www-rohan.sdsu.edu/~aty/bibliog/latex/gripe.html), I find standard LaTeX fonts to be appealing.\n\nThe next line (`template: ...`) tells R Markdown to use my custom LaTeX template.[^path] While I will own any errors in the code, I confess to \"Frankensteining\" this template from [the default LaTeX template](https://github.com/jgm/pandoc-templates) from Pandoc, [Kieran Healy's LaTeX template](https://github.com/kjhealy/pandoc-templates/tree/master/templates), and liberally using raw TeX from the [Association for Computing Machinery's (ACM) LaTeX template](https://www.acm.org/publications/article-templates/acm-latex-style-guide). I rather like that template since it resembles standard manuscripts when they are published in some of our more prominent journals. I will continue with a description of the YAML metadata in the next paragraph, though invite the curious reader to scroll to the end of the accompanying post to see the PDF this template produces.\n\n\n[^path]: Notice that the path is relative. The user can, if she wishes, install this in the default Pandoc directory. I don't think this is necessary. Just be mindful of wherever the template is placed. Importantly, `~` is used in R to find the home directory (not necessarily the working directory). It is equivalent to saying `/home/steve` in Linux, or `/Users/steve` on a Mac, in my case.\n\nThe next fields get to the heart of the document itself. `title:` is, intuitively, the title of the manuscript. Do note that fields like `title:` do not have to be in quotation marks, but must be in quotation marks if the title of the document includes a colon. That said, the only reason to use a colon in an article title is if it is followed by a subtitle, hence the optional field (`subtitle:`). Notice I \"comment out\" the subtitle in the above example with a pound sign since this particular document does not have a subtitle. If `thanks:` is included and has an accompanying entry, the ensuing title of the document gets an asterisk and a footnote. This field is typically used to advise readers that the document is a working paper or is forthcoming in a journal.\n\nThe next field (`author:`) is a divergence from standard YAML, but I think it is useful. I will also confess to pilfering this idea from Kieran Healy's template. Typically, multiple authors for a given document are separated by an `\\and` in this field. However, standard LaTeX then creates a tabular field separating multiple authors that is somewhat restrictive and not easy to override. As a result, I use this setup (again, taken from Kieran Healy) to sidestep the restrictive rendering of authors in the standard `\\maketitle` tag. After `author:`, enter `- name:` (no space before the dash) and fill in the field with the first author. On the next line, enter two spaces, followed by `affiliation:` and the institute or university affiliation of the first author.\n\nDo notice this can be repeated for however many co-authors there are to a manuscript. The rendered PDF will enter each co-author in a new line in a manner similar to journals like *American Journal of Political Science*, *American Political Science Review*, or *Journal of Politics*.\n\nThe next two fields pertain to the frontmatter of a manuscript. They should also be intuitive for the reader. `abstract` should contain the abstract and `keywords` should contain some keywords that describe the research project. Both fields are optional, though are practically mandatory. Every manuscript requires an abstract and some journals---especially those published by Sage---request them with submitted manuscripts. My template also includes these keywords in the PDF's metadata.\n\n`date` comes standard with R Markdown and you can use it to enter the date of the most recent compile. I typically include the date of the last compile for a working paper in the `thanks:` field, so this field currently does not do anything in my Markdown-LaTeX manuscript template. I include it in my YAML as a legacy, basically.\n\nThe next items are optional and cosmetic. `geometry:` is a standard option in LaTeX. I set the margins at one inch, and you probably should too. `fontfamily:` is optional, but I use it to specify the Palatino font. The default option is Computer Modern Roman. `fontsize:` sets, intuitively, the font size. The default is 10-point, but I prefer 11-point. `spacing:` is an optional field. If it is set as \"double\", the ensuing document is double-spaced. \"single\" is the only other valid entry for this field, though not including the entry in the YAML metadata amounts to singlespacing the document by default. Notice I have this \"commented out\" in the example code.\n\nThe final two options pertain to the bibliography. `bibliography:` specifies the location of the .bib file, so the author could make citations in the manuscript. `biblio-style` specifies the type of bibliography to use. You'll typically set this as APSR. You could also specify the relative path of [my *Journal of Peace Research* .bst file](http://svmiller.com/miscellany/journal-of-peace-research-bst-file/) if you are submitting to that journal.\n\n# Getting Started with Markdown Syntax\n\nThere are a lot of cheatsheets and reference guides for Markdown (e.g. [Adam Prichard](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet), [Assemble](http://assemble.io/docs/Cheatsheet-Markdown.html), [Rstudio](https://www.rstudio.com/wp-content/uploads/2015/02/rmarkdown-cheatsheet.pdf), [Rstudio again](https://www.rstudio.com/wp-content/uploads/2015/03/rmarkdown-reference.pdf), [Scott Boms](http://scottboms.com/downloads/documentation/markdown_cheatsheet.pdf), [Daring Fireball](https://daringfireball.net/projects/markdown/syntax), among, I'm sure, several others). I encourage the reader to look at those, though I will retread these references here with a minimal working example below.\n\n```markdown\n\n# Introduction\n\n**Lorem ipsum** dolor *sit amet*. \n\n- Single asterisks italicize text *like this*. \n- Double asterisks embolden text **like this**.\n\nStart a new paragraph with a blank line separating paragraphs.\n\n- This will start an unordered list environment, and this will be the first item.\n- This will be a second item.\n- A third item.\n    - Four spaces and a dash create a sublist and this item in it.\n- The fourth item.\n    \n1. This starts a numerical list.\n2. This is no. 2 in the numerical list.\n    \n# This Starts A New Section\n## This is a Subsection\n### This is a Subsubsection\n#### This starts a Paragraph Block.\n\n> This will create a block quote, if you want one.\n\nWant a table? This will create one.\n\nTable Header  | Second Header\n------------- | -------------\nTable Cell    | Cell 2\nCell 3        | Cell 4 \n\nNote that the separators *do not* have to be aligned.\n\nWant an image? This will do it.\n\n![caption for my image](path/to/image.jpg)\n\n`fig_caption: yes` will provide a caption. Put that in the YAML metadata.\n\nAlmost forgot about creating a footnote.[^1] This will do it again.[^2]\n\n[^1]: The first footnote\n[^2]: The second footnote\n\nWant to cite something? \n\n- Find your biblatexkey in your bib file.\n- Put an @ before it, like @smith1984, or whatever it is.\n- @smith1984 creates an in-text citation (e.g. Smith (1984) says...)\n- [@smith1984] creates a parenthetical citation (Smith, 1984)\n\nThat'll also automatically create a reference list at the end of the document.\n\n[In-text link to Google](http://google.com) as well.\n```\n\nThat's honestly it. Markdown takes the chore of markup from your manuscript (hence: \"Markdown\").\n\nOn that note, you could easily pass most LaTeX code through Markdown if you're writing a LaTeX document. However, you don't need to do this (unless you're using the math environment) and probably shouldn't anyway if you intend to share your document in HTML as well.\n\n# Using R Markdown with Knitr\n\nPerhaps the greatest intrigue of R Markdown comes with the [`knitr` package](http://yihui.name/knitr/) provided by @xie2013ddrk. In other words, the author can, if she chooses, do the analysis in the Markdown document itself and compile/execute it in R.\n\nTake, for example, this simple exercise using the `voteincome` data from the `Zelig` package. Suppose I want to explain the decision to vote using data from this package. I load in the data, clean the data, run the analyses, and present the results as a coefficient plot.\n\nHere's what this code looks like. All I did was create a code display, which starts with three *backticks* (i.e. those ticks next to the number 1 key on your keyboard) and ends with three backticks on another line. On the first line of backticks (i.e. to start the code display) enter `{r, eval=FALSE, tidy=TRUE}`. The `eval=FALSE` option just displays the R code (and does not run it), `tidy=TRUE` wraps long code so it does not run off the page.\n\nWithin that code display, I enter my R code like this.\n\n\n```{r, eval=FALSE, tidy = TRUE}\nsuppressMessages(library(Zelig))\nsuppressMessages(library(arm))\nsuppressMessages(library(coefplot))\n\ndata(voteincome)\n\nvoteincome$z.age <- arm::rescale(voteincome$age)\nvoteincome$z.education <- arm::rescale(voteincome$education)\nvoteincome$z.income <- arm::rescale(voteincome$income)\n\nM1 <- glm(vote ~ z.age + female + z.education + z.income,\n            data=voteincome, family=binomial)\n\ncoefplot(M1)\n```\n\nThe implications for workflow are faily substantial. Authors can rather quickly display the code they used to run the analyses in the document itself (likely in the appendix). As such, there's little guesswork for reviewers and editors in understanding what the author did in the analyses reported in the manuscript.\n\nIt doesn't end there. In fact, here's what happens when `eval=FALSE` is omitted or changed to `eval=TRUE`. Now, the code runs within R. Observe.\n\n```{r, eval=TRUE, tidy = TRUE, cache=FALSE, fig.cap=\"A Coefficient Plot\"}\nsuppressMessages(library(Zelig))\nsuppressMessages(library(arm))\n\n\ndata(voteincome)\n\nvoteincome$z.age <- arm::rescale(voteincome$age)\nvoteincome$z.education <- arm::rescale(voteincome$education)\nvoteincome$z.income <- arm::rescale(voteincome$income)\n\nM1 <- glm(vote ~ z.age + female + z.education + z.income,\n            data=voteincome, family=binomial)\n\narm::coefplot(M1)\n```\n\nTo get `knitr` to present the results of a table, add `results=\"asis\"` to the brackets to start the R code chunk. The ensuing output will look like this (though the table may come on the next page).\n\n```{r, eval=TRUE, tidy = TRUE, size=\"small\", cache=FALSE, results=\"asis\"}\nsuppressMessages(library(Zelig))\nsuppressMessages(library(stargazer))\nsuppressMessages(library(arm))\n\ndata(voteincome)\n\nvoteincome$z.age <- arm::rescale(voteincome$age)\nvoteincome$z.education <- arm::rescale(voteincome$education)\nvoteincome$z.income <- arm::rescale(voteincome$income)\n\n\nM1 <- glm(vote ~ z.age + female + z.education + z.income,\n            data=voteincome, family=binomial)\n\nstargazer(M1, title=\"A Handsome Table\", header=FALSE)\n```\n\nAdding `echo=\"FALSE\"` inside the brackets to start the R chunk will omit the presentation of the R commands. It will just present the table. This provides substantial opportunity for authors in doing their analyses. Now, the analysis and presentation in the form of a polished manuscript can be effectively simultaneous.[^4]\n\n[^4]: I'm not sure if I'm ready to commit to this myself since my workflow is still largely derived from [Rob J. Hyndman's example](http://robjhyndman.com/hyndsight/workflow-in-r/). However, *knitr* has endless potential, especially when analyses can stored in cache, saved as chunks, or loaded in the preamble of a document to reference later in the manuscript.\n\n\n\n\n<!--\n# References\n\\setlength{\\parindent}{-0.2in}\n\\setlength{\\leftskip}{0.2in}\n\\setlength{\\parskip}{8pt}\n\\vspace*{-0.2in}\n\\noindent\n-->",
      "author": "ibrahim",
      "cover": ""
    },
    {
      "id": "c08e",
      "views": "35435",
      "date": "Sat Jan 20 2024 15:34:08 GMT+0200 (Eastern European Standard Time)",
      "title": "My Github Account",
      "content": "<h2 align=\"center\"> Hi there üëã</h3>\n\n<p align=\"center\">\nI'm Ibrahim Ahmed, a javascript full stack web developer.\n</p>\n\n<p align=\"center\">\n  <!-- <img src=\"assets/coding.gif\" width=\"40%\"> -->\n  <a href=\"https://app.daily.dev/ibrahim11ahmed\"><img src=\"https://api.daily.dev/devcards/ce4a567f61944a2a8effdf2846c47a0b.png?r=lyz\" width=\"400\" alt=\"Ibrahim Ahmed Abdelnaby's Dev Card\"/></a>\n</p>\n\n<div align = \"center\">\n\n![](https://komarev.com/ghpvc/?username=ibrahim11elian&style=for-the-badge&color=011627)\n\n</div>\n\n</br>\n</br>\n\n## ü§ô Contact me\n\n <p align=\"left\">\n  \n  <a href=\"https://www.linkedin.com/in/ibrahim-ahmed-a8bba9196\" target=\"_blank\">![LinkedIn](https://img.shields.io/badge/linkedin-%230077B5.svg?style=for-the-badge&logo=linkedin&logoColor=white)\n  </a>\n  <a href=\"https://www.facebook.com/ibrahim11ahmed\" target=\"_blank\">![Facebook](https://img.shields.io/badge/Facebook-%231877F2.svg?style=for-the-badge&logo=Facebook&logoColor=white)\n  </a>\n  <a href=\"mailto:ibrahim11elian@gmail.com\" target=\"_blank\">![Gmail](https://img.shields.io/badge/Gmail-D14836?style=for-the-badge&logo=gmail&logoColor=white)\n  </a>\n  <a href=\"tel:+201157676284\" target=\"_blank\">![WhatsApp](https://img.shields.io/badge/WhatsApp-25D366?style=for-the-badge&logo=whatsapp&logoColor=white)\n  </a>\n  <a href=\"https://www.instagram.com/ibrahim11ahmed/\" target=\"_blank\">![Instagram](https://img.shields.io/badge/Instagram-%23E4405F.svg?style=for-the-badge&logo=Instagram&logoColor=white)\n  </a>\n  <a href=\"https://twitter.com/ibrahim11elian\" target=\"_blank\">![Twitter](https://img.shields.io/badge/Twitter-%231DA1F2.svg?style=for-the-badge&logo=Twitter&logoColor=white)\n  </a>\n  \n </p> \n  </br>\n\n## üìà Stats\n\n<div align=\"center\">\n\n![GitHub Streak](https://github-readme-streak-stats-six-lac.vercel.app?user=ibrahim11elian&theme=nightowl&hide_border=true)\n\n</div> \n \n<div align=\"center\">\n  \n![Top Langs](https://github-readme-stats.vercel.app/api/top-langs/?username=ibrahim11elian&theme=nightowl&hide_border=true&layout=compact&line_height=)\n</div>\n\n![Ashutosh's github activity graph](https://github-readme-activity-graph.vercel.app/graph?username=ibrahim11elian&theme=rogue)\n</br>\n\n## üõ†Ô∏è My Skills\n\n</br>\n\n### üî§ Programming languages\n\n<p align=\"left\"> \n  \n![JavaScript](https://img.shields.io/badge/javascript-%23323330.svg?style=for-the-badge&logo=javascript&logoColor=%23F7DF1E)\n![TypeScript](https://img.shields.io/badge/typescript-%23007ACC.svg?style=for-the-badge&logo=typescript&logoColor=white)\n![Python](https://img.shields.io/badge/python-3670A0?style=for-the-badge&logo=python&logoColor=ffdd54)\n![C](https://img.shields.io/badge/c-%2300599C.svg?style=for-the-badge&logo=c&logoColor=white)\n![Java](https://img.shields.io/badge/java-%23ED8B00.svg?style=for-the-badge&logo=java&logoColor=white)\n  \n</p>\n</br>\n\n### üë©‚Äçüíª Frontend Development\n\n<p align=\"left\"> \n  \n![HTML5](https://img.shields.io/badge/html5-%23E34F26.svg?style=for-the-badge&logo=html5&logoColor=white)\n![CSS3](https://img.shields.io/badge/css3-%231572B6.svg?style=for-the-badge&logo=css3&logoColor=white)\n![SASS](https://img.shields.io/badge/SASS-hotpink.svg?style=for-the-badge&logo=SASS&logoColor=white)\n![Bootstrap](https://img.shields.io/badge/bootstrap-%23563D7C.svg?style=for-the-badge&logo=bootstrap&logoColor=white)\n![React](https://img.shields.io/badge/react-%2320232a.svg?style=for-the-badge&logo=react&logoColor=%2361DAFB)\n![Vite](https://img.shields.io/badge/vite-%23646CFF.svg?style=for-the-badge&logo=vite&logoColor=white)\n![Jasmine](https://img.shields.io/badge/jasmine-%238A4182.svg?style=for-the-badge&logo=jasmine&logoColor=white)\n\n</p>\n</br>\n\n### ‚òÅÔ∏è Cloud Hosting\n\n<p align=\"left\">\n  \n<a href=\"https://www.github.com\"><img alt=\"GitHub Pages\" src=\"https://img.shields.io/badge/GitHub%20Pages-%23327FC7.svg?style=flat&logo=github&logoColor=white\"></a>\n![Heroku](https://img.shields.io/badge/heroku-%23430098.svg?style=for-the-badge&logo=heroku&logoColor=white)\n![Netlify](https://img.shields.io/badge/netlify-%23000000.svg?style=for-the-badge&logo=netlify&logoColor=#00C7B7)\n</p>\n</br>\n\n### üóÑÔ∏è Backend & Frameworks\n\n<p align=\"left\">\n  \n![NodeJS](https://img.shields.io/badge/node.js-6DA55F?style=for-the-badge&logo=node.js&logoColor=white)\n![Express.js](https://img.shields.io/badge/express.js-%23404d59.svg?style=for-the-badge&logo=express&logoColor=%2361DAFB)\n\n</p>\n</br>\n\n### üõ¢ Database\n\n<p align=\"left\">\n  \n![Postgres](https://img.shields.io/badge/postgres-%23316192.svg?style=for-the-badge&logo=postgresql&logoColor=white)\n\n</p>\n</br>\n\n### üë©‚Äçüíª Version Control\n\n<p align=\"left\">\n  \n![Git](https://img.shields.io/badge/git-%23F05033.svg?style=for-the-badge&logo=git&logoColor=white)\n![GitHub](https://img.shields.io/badge/github-%23121011.svg?style=for-the-badge&logo=github&logoColor=white)\n\n</p>\n</br>\n\n### üë®‚Äçüíª Software & Tools\n\n<p align=\"left\">\n\n![Markdown](https://img.shields.io/badge/markdown-%23000000.svg?style=for-the-badge&logo=markdown&logoColor=white)\n![Windows Terminal](https://img.shields.io/badge/Windows%20Terminalt-%234D4D4D.svg?style=for-the-badge&logo=windows-terminal&logoColor=white)\n![Visual Studio Code](https://img.shields.io/badge/Visual%20Studio%20Code-0078d7.svg?style=for-the-badge&logo=visual-studio-code&logoColor=white)\n![CodePen](https://img.shields.io/badge/Codepen-000000?style=for-the-badge&logo=codepen&logoColor=white)\n![Visual Studio](https://img.shields.io/badge/Visual%20Studio-5C2D91.svg?style=for-the-badge&logo=visual-studio&logoColor=white)\n![Notion](https://img.shields.io/badge/Notion-%23000000.svg?style=for-the-badge&logo=notion&logoColor=white)\n![Trello](https://img.shields.io/badge/Trello-%23026AA7.svg?style=for-the-badge&logo=Trello&logoColor=white)\n\n</p>\n</br>\n\n### üí° Problem Solving\n\n<p align=\"left\">\n  \n![LeetCode](https://img.shields.io/badge/LeetCode-000000?style=for-the-badge&logo=LeetCode&logoColor=#d16c06)\n![HackerRank](https://img.shields.io/badge/-Hackerrank-2EC866?style=for-the-badge&logo=HackerRank&logoColor=white)\n![Codeforces](https://img.shields.io/badge/Codeforces-445f9d?style=for-the-badge&logo=Codeforces&logoColor=white)\n\n</p>\n</br>\n\n### üíª Learning Sources\n\n<p align=\"left\">\n  \n![ChatGPT](https://img.shields.io/badge/chatGPT-74aa9c?style=for-the-badge&logo=openai&logoColor=white)\n![MDN Web Docs](https://img.shields.io/badge/MDN_Web_Docs-black?style=for-the-badge&logo=mdnwebdocs&logoColor=white)\n![Udacity](https://img.shields.io/badge/Udacity-grey?style=for-the-badge&logo=udacity&logoColor=15B8E6)\n![FreeCodeCamp](https://img.shields.io/badge/Freecodecamp-%23123.svg?&style=for-the-badge&logo=freecodecamp&logoColor=green)\n![Udemy](https://img.shields.io/badge/Udemy-A435F0?style=for-the-badge&logo=Udemy&logoColor=white)\n![Stack Overflow](https://img.shields.io/badge/-Stackoverflow-FE7A16?style=for-the-badge&logo=stack-overflow&logoColor=white)\n![GeeksForGeeks](https://img.shields.io/badge/GeeksforGeeks-gray?style=for-the-badge&logo=geeksforgeeks&logoColor=35914c)\n![YouTube](https://img.shields.io/badge/YouTube-%23FF0000.svg?style=for-the-badge&logo=YouTube&logoColor=white)\n\n</p>\n",
      "author": "Ibrahim Ahmed Abdelnaby",
      "cover": "ibrahim.WebP"
    }
  ],
  "images": [
    {
      "id": "83f3"
    }
  ]
}